{
    "directed": false, 
    "graph": {}, 
    "links": [
        {
            "source": 0, 
            "target": 195
        }, 
        {
            "source": 0, 
            "target": 146
        }, 
        {
            "source": 0, 
            "target": 31
        }, 
        {
            "source": 0, 
            "target": 206
        }, 
        {
            "source": 0, 
            "target": 66
        }, 
        {
            "source": 0, 
            "target": 82
        }, 
        {
            "source": 0, 
            "target": 7
        }, 
        {
            "source": 0, 
            "target": 190
        }, 
        {
            "source": 0, 
            "target": 167
        }, 
        {
            "source": 0, 
            "target": 84
        }, 
        {
            "source": 0, 
            "target": 143
        }, 
        {
            "source": 0, 
            "target": 14
        }, 
        {
            "source": 1, 
            "target": 174
        }, 
        {
            "source": 1, 
            "target": 153
        }, 
        {
            "source": 1, 
            "target": 163
        }, 
        {
            "source": 1, 
            "target": 7
        }, 
        {
            "source": 1, 
            "target": 128
        }, 
        {
            "source": 1, 
            "target": 214
        }, 
        {
            "source": 2, 
            "target": 107
        }, 
        {
            "source": 2, 
            "target": 195
        }, 
        {
            "source": 2, 
            "target": 14
        }, 
        {
            "source": 3, 
            "target": 168
        }, 
        {
            "source": 4, 
            "target": 57
        }, 
        {
            "source": 5, 
            "target": 95
        }, 
        {
            "source": 6, 
            "target": 56
        }, 
        {
            "source": 6, 
            "target": 21
        }, 
        {
            "source": 6, 
            "target": 12
        }, 
        {
            "source": 8, 
            "target": 193
        }, 
        {
            "source": 9, 
            "target": 151
        }, 
        {
            "source": 9, 
            "target": 138
        }, 
        {
            "source": 9, 
            "target": 95
        }, 
        {
            "source": 9, 
            "target": 196
        }, 
        {
            "source": 10, 
            "target": 62
        }, 
        {
            "source": 10, 
            "target": 108
        }, 
        {
            "source": 10, 
            "target": 71
        }, 
        {
            "source": 11, 
            "target": 144
        }, 
        {
            "source": 12, 
            "target": 104
        }, 
        {
            "source": 12, 
            "target": 193
        }, 
        {
            "source": 12, 
            "target": 201
        }, 
        {
            "source": 12, 
            "target": 140
        }, 
        {
            "source": 13, 
            "target": 145
        }, 
        {
            "source": 13, 
            "target": 114
        }, 
        {
            "source": 13, 
            "target": 196
        }, 
        {
            "source": 13, 
            "target": 119
        }, 
        {
            "source": 14, 
            "target": 107
        }, 
        {
            "source": 14, 
            "target": 64
        }, 
        {
            "source": 14, 
            "target": 154
        }, 
        {
            "source": 14, 
            "target": 156
        }, 
        {
            "source": 14, 
            "target": 201
        }, 
        {
            "source": 15, 
            "target": 125
        }, 
        {
            "source": 15, 
            "target": 42
        }, 
        {
            "source": 17, 
            "target": 24
        }, 
        {
            "source": 17, 
            "target": 152
        }, 
        {
            "source": 17, 
            "target": 217
        }, 
        {
            "source": 18, 
            "target": 217
        }, 
        {
            "source": 18, 
            "target": 167
        }, 
        {
            "source": 18, 
            "target": 44
        }, 
        {
            "source": 19, 
            "target": 66
        }, 
        {
            "source": 19, 
            "target": 211
        }, 
        {
            "source": 19, 
            "target": 50
        }, 
        {
            "source": 20, 
            "target": 48
        }, 
        {
            "source": 22, 
            "target": 191
        }, 
        {
            "source": 23, 
            "target": 205
        }, 
        {
            "source": 24, 
            "target": 152
        }, 
        {
            "source": 25, 
            "target": 26
        }, 
        {
            "source": 26, 
            "target": 184
        }, 
        {
            "source": 26, 
            "target": 73
        }, 
        {
            "source": 26, 
            "target": 187
        }, 
        {
            "source": 26, 
            "target": 57
        }, 
        {
            "source": 26, 
            "target": 155
        }, 
        {
            "source": 26, 
            "target": 145
        }, 
        {
            "source": 27, 
            "target": 137
        }, 
        {
            "source": 29, 
            "target": 35
        }, 
        {
            "source": 30, 
            "target": 151
        }, 
        {
            "source": 30, 
            "target": 190
        }, 
        {
            "source": 30, 
            "target": 178
        }, 
        {
            "source": 30, 
            "target": 138
        }, 
        {
            "source": 30, 
            "target": 132
        }, 
        {
            "source": 31, 
            "target": 154
        }, 
        {
            "source": 31, 
            "target": 163
        }, 
        {
            "source": 31, 
            "target": 166
        }, 
        {
            "source": 32, 
            "target": 136
        }, 
        {
            "source": 32, 
            "target": 217
        }, 
        {
            "source": 32, 
            "target": 207
        }, 
        {
            "source": 32, 
            "target": 149
        }, 
        {
            "source": 33, 
            "target": 186
        }, 
        {
            "source": 34, 
            "target": 84
        }, 
        {
            "source": 34, 
            "target": 216
        }, 
        {
            "source": 35, 
            "target": 71
        }, 
        {
            "source": 35, 
            "target": 176
        }, 
        {
            "source": 35, 
            "target": 179
        }, 
        {
            "source": 36, 
            "target": 199
        }, 
        {
            "source": 37, 
            "target": 198
        }, 
        {
            "source": 37, 
            "target": 165
        }, 
        {
            "source": 37, 
            "target": 184
        }, 
        {
            "source": 37, 
            "target": 91
        }, 
        {
            "source": 38, 
            "target": 162
        }, 
        {
            "source": 38, 
            "target": 124
        }, 
        {
            "source": 38, 
            "target": 95
        }, 
        {
            "source": 38, 
            "target": 210
        }, 
        {
            "source": 39, 
            "target": 202
        }, 
        {
            "source": 40, 
            "target": 41
        }, 
        {
            "source": 40, 
            "target": 139
        }, 
        {
            "source": 40, 
            "target": 187
        }, 
        {
            "source": 42, 
            "target": 154
        }, 
        {
            "source": 42, 
            "target": 164
        }, 
        {
            "source": 42, 
            "target": 69
        }, 
        {
            "source": 42, 
            "target": 51
        }, 
        {
            "source": 43, 
            "target": 48
        }, 
        {
            "source": 44, 
            "target": 172
        }, 
        {
            "source": 44, 
            "target": 217
        }, 
        {
            "source": 44, 
            "target": 210
        }, 
        {
            "source": 45, 
            "target": 105
        }, 
        {
            "source": 46, 
            "target": 191
        }, 
        {
            "source": 47, 
            "target": 75
        }, 
        {
            "source": 47, 
            "target": 57
        }, 
        {
            "source": 47, 
            "target": 72
        }, 
        {
            "source": 47, 
            "target": 155
        }, 
        {
            "source": 47, 
            "target": 145
        }, 
        {
            "source": 47, 
            "target": 194
        }, 
        {
            "source": 48, 
            "target": 108
        }, 
        {
            "source": 49, 
            "target": 101
        }, 
        {
            "source": 49, 
            "target": 211
        }, 
        {
            "source": 49, 
            "target": 50
        }, 
        {
            "source": 50, 
            "target": 58
        }, 
        {
            "source": 51, 
            "target": 79
        }, 
        {
            "source": 51, 
            "target": 206
        }, 
        {
            "source": 51, 
            "target": 136
        }, 
        {
            "source": 51, 
            "target": 149
        }, 
        {
            "source": 52, 
            "target": 208
        }, 
        {
            "source": 53, 
            "target": 165
        }, 
        {
            "source": 55, 
            "target": 125
        }, 
        {
            "source": 56, 
            "target": 165
        }, 
        {
            "source": 56, 
            "target": 144
        }, 
        {
            "source": 56, 
            "target": 156
        }, 
        {
            "source": 56, 
            "target": 91
        }, 
        {
            "source": 57, 
            "target": 119
        }, 
        {
            "source": 57, 
            "target": 154
        }, 
        {
            "source": 57, 
            "target": 68
        }, 
        {
            "source": 57, 
            "target": 130
        }, 
        {
            "source": 59, 
            "target": 112
        }, 
        {
            "source": 59, 
            "target": 118
        }, 
        {
            "source": 59, 
            "target": 90
        }, 
        {
            "source": 60, 
            "target": 143
        }, 
        {
            "source": 60, 
            "target": 107
        }, 
        {
            "source": 60, 
            "target": 195
        }, 
        {
            "source": 61, 
            "target": 165
        }, 
        {
            "source": 62, 
            "target": 197
        }, 
        {
            "source": 62, 
            "target": 212
        }, 
        {
            "source": 63, 
            "target": 163
        }, 
        {
            "source": 63, 
            "target": 81
        }, 
        {
            "source": 63, 
            "target": 171
        }, 
        {
            "source": 64, 
            "target": 154
        }, 
        {
            "source": 64, 
            "target": 143
        }, 
        {
            "source": 65, 
            "target": 155
        }, 
        {
            "source": 65, 
            "target": 199
        }, 
        {
            "source": 65, 
            "target": 196
        }, 
        {
            "source": 65, 
            "target": 119
        }, 
        {
            "source": 66, 
            "target": 83
        }, 
        {
            "source": 67, 
            "target": 70
        }, 
        {
            "source": 68, 
            "target": 108
        }, 
        {
            "source": 68, 
            "target": 187
        }, 
        {
            "source": 68, 
            "target": 82
        }, 
        {
            "source": 68, 
            "target": 72
        }, 
        {
            "source": 68, 
            "target": 205
        }, 
        {
            "source": 68, 
            "target": 155
        }, 
        {
            "source": 68, 
            "target": 145
        }, 
        {
            "source": 70, 
            "target": 177
        }, 
        {
            "source": 71, 
            "target": 212
        }, 
        {
            "source": 71, 
            "target": 94
        }, 
        {
            "source": 71, 
            "target": 213
        }, 
        {
            "source": 72, 
            "target": 119
        }, 
        {
            "source": 72, 
            "target": 154
        }, 
        {
            "source": 72, 
            "target": 212
        }, 
        {
            "source": 72, 
            "target": 100
        }, 
        {
            "source": 72, 
            "target": 214
        }, 
        {
            "source": 72, 
            "target": 192
        }, 
        {
            "source": 74, 
            "target": 199
        }, 
        {
            "source": 76, 
            "target": 214
        }, 
        {
            "source": 77, 
            "target": 89
        }, 
        {
            "source": 77, 
            "target": 105
        }, 
        {
            "source": 77, 
            "target": 149
        }, 
        {
            "source": 77, 
            "target": 188
        }, 
        {
            "source": 78, 
            "target": 188
        }, 
        {
            "source": 80, 
            "target": 205
        }, 
        {
            "source": 81, 
            "target": 133
        }, 
        {
            "source": 81, 
            "target": 157
        }, 
        {
            "source": 81, 
            "target": 128
        }, 
        {
            "source": 81, 
            "target": 166
        }, 
        {
            "source": 81, 
            "target": 115
        }, 
        {
            "source": 82, 
            "target": 191
        }, 
        {
            "source": 83, 
            "target": 107
        }, 
        {
            "source": 83, 
            "target": 101
        }, 
        {
            "source": 85, 
            "target": 114
        }, 
        {
            "source": 86, 
            "target": 217
        }, 
        {
            "source": 87, 
            "target": 186
        }, 
        {
            "source": 88, 
            "target": 158
        }, 
        {
            "source": 88, 
            "target": 89
        }, 
        {
            "source": 88, 
            "target": 132
        }, 
        {
            "source": 89, 
            "target": 161
        }, 
        {
            "source": 89, 
            "target": 190
        }, 
        {
            "source": 89, 
            "target": 127
        }, 
        {
            "source": 89, 
            "target": 135
        }, 
        {
            "source": 90, 
            "target": 112
        }, 
        {
            "source": 91, 
            "target": 169
        }, 
        {
            "source": 91, 
            "target": 144
        }, 
        {
            "source": 91, 
            "target": 104
        }, 
        {
            "source": 92, 
            "target": 131
        }, 
        {
            "source": 93, 
            "target": 202
        }, 
        {
            "source": 95, 
            "target": 108
        }, 
        {
            "source": 95, 
            "target": 187
        }, 
        {
            "source": 95, 
            "target": 117
        }, 
        {
            "source": 95, 
            "target": 170
        }, 
        {
            "source": 96, 
            "target": 190
        }, 
        {
            "source": 96, 
            "target": 195
        }, 
        {
            "source": 96, 
            "target": 107
        }, 
        {
            "source": 97, 
            "target": 145
        }, 
        {
            "source": 98, 
            "target": 108
        }, 
        {
            "source": 99, 
            "target": 178
        }, 
        {
            "source": 99, 
            "target": 188
        }, 
        {
            "source": 100, 
            "target": 186
        }, 
        {
            "source": 100, 
            "target": 196
        }, 
        {
            "source": 100, 
            "target": 119
        }, 
        {
            "source": 102, 
            "target": 208
        }, 
        {
            "source": 104, 
            "target": 175
        }, 
        {
            "source": 105, 
            "target": 178
        }, 
        {
            "source": 106, 
            "target": 168
        }, 
        {
            "source": 107, 
            "target": 190
        }, 
        {
            "source": 107, 
            "target": 143
        }, 
        {
            "source": 108, 
            "target": 119
        }, 
        {
            "source": 108, 
            "target": 154
        }, 
        {
            "source": 108, 
            "target": 214
        }, 
        {
            "source": 109, 
            "target": 135
        }, 
        {
            "source": 110, 
            "target": 118
        }, 
        {
            "source": 110, 
            "target": 127
        }, 
        {
            "source": 112, 
            "target": 132
        }, 
        {
            "source": 114, 
            "target": 142
        }, 
        {
            "source": 116, 
            "target": 136
        }, 
        {
            "source": 116, 
            "target": 217
        }, 
        {
            "source": 116, 
            "target": 200
        }, 
        {
            "source": 116, 
            "target": 149
        }, 
        {
            "source": 117, 
            "target": 119
        }, 
        {
            "source": 117, 
            "target": 137
        }, 
        {
            "source": 118, 
            "target": 213
        }, 
        {
            "source": 119, 
            "target": 176
        }, 
        {
            "source": 119, 
            "target": 187
        }, 
        {
            "source": 119, 
            "target": 155
        }, 
        {
            "source": 119, 
            "target": 145
        }, 
        {
            "source": 119, 
            "target": 130
        }, 
        {
            "source": 119, 
            "target": 191
        }, 
        {
            "source": 121, 
            "target": 155
        }, 
        {
            "source": 122, 
            "target": 197
        }, 
        {
            "source": 122, 
            "target": 128
        }, 
        {
            "source": 124, 
            "target": 173
        }, 
        {
            "source": 124, 
            "target": 149
        }, 
        {
            "source": 125, 
            "target": 154
        }, 
        {
            "source": 125, 
            "target": 152
        }, 
        {
            "source": 125, 
            "target": 185
        }, 
        {
            "source": 127, 
            "target": 147
        }, 
        {
            "source": 127, 
            "target": 154
        }, 
        {
            "source": 128, 
            "target": 197
        }, 
        {
            "source": 128, 
            "target": 214
        }, 
        {
            "source": 130, 
            "target": 202
        }, 
        {
            "source": 130, 
            "target": 196
        }, 
        {
            "source": 131, 
            "target": 189
        }, 
        {
            "source": 132, 
            "target": 135
        }, 
        {
            "source": 132, 
            "target": 180
        }, 
        {
            "source": 133, 
            "target": 209
        }, 
        {
            "source": 133, 
            "target": 166
        }, 
        {
            "source": 134, 
            "target": 191
        }, 
        {
            "source": 136, 
            "target": 167
        }, 
        {
            "source": 137, 
            "target": 176
        }, 
        {
            "source": 137, 
            "target": 141
        }, 
        {
            "source": 138, 
            "target": 162
        }, 
        {
            "source": 138, 
            "target": 161
        }, 
        {
            "source": 140, 
            "target": 165
        }, 
        {
            "source": 140, 
            "target": 203
        }, 
        {
            "source": 143, 
            "target": 149
        }, 
        {
            "source": 143, 
            "target": 210
        }, 
        {
            "source": 143, 
            "target": 154
        }, 
        {
            "source": 144, 
            "target": 193
        }, 
        {
            "source": 145, 
            "target": 154
        }, 
        {
            "source": 150, 
            "target": 187
        }, 
        {
            "source": 151, 
            "target": 182
        }, 
        {
            "source": 154, 
            "target": 187
        }, 
        {
            "source": 154, 
            "target": 155
        }, 
        {
            "source": 154, 
            "target": 190
        }, 
        {
            "source": 154, 
            "target": 195
        }, 
        {
            "source": 154, 
            "target": 213
        }, 
        {
            "source": 156, 
            "target": 166
        }, 
        {
            "source": 157, 
            "target": 181
        }, 
        {
            "source": 157, 
            "target": 163
        }, 
        {
            "source": 159, 
            "target": 170
        }, 
        {
            "source": 160, 
            "target": 191
        }, 
        {
            "source": 160, 
            "target": 176
        }, 
        {
            "source": 161, 
            "target": 173
        }, 
        {
            "source": 163, 
            "target": 201
        }, 
        {
            "source": 170, 
            "target": 178
        }, 
        {
            "source": 170, 
            "target": 188
        }, 
        {
            "source": 178, 
            "target": 210
        }, 
        {
            "source": 184, 
            "target": 198
        }, 
        {
            "source": 204, 
            "target": 211
        }, 
        {
            "source": 210, 
            "target": 217
        }
    ], 
    "multigraph": false, 
    "nodes": [
        {
            "alias": "dcff", 
            "default": "", 
            "dep_string": "finance.InterestRatePerYear;finance.TimeHorizon", 
            "dependencies": [
                "finance.InterestRatePerYear", 
                "finance.TimeHorizon"
            ], 
            "fun_src": "\n\ndef compute(self):\n    interestExponents = [(- x) for x in xrange(1, (self.get(TimeHorizon) + 1))]\n    return sum((numpy.array((1 + self.get(InterestRatePerYear))) ** interestExponents))\n", 
            "id": "finance.DiscountedCashFlowFactor", 
            "name": "finance.DiscountedCashFlowFactor", 
            "section": "finance", 
            "type": "OTHER", 
            "units": "", 
            "x": 0.016937834385153408, 
            "y": 0.071270271555427256
        }, 
        {
            "alias": "og_fl", 
            "default": "", 
            "dep_string": "costOffGrid.DieselFuelCostPerLiter;costOffGrid.DieselFuelLitersConsumedPerKilowattHour;costOffGrid.DieselGeneratorActualSystemCapacity;costOffGrid.DieselGeneratorEffectiveHoursOfOperationPerYear", 
            "dependencies": [
                "costOffGrid.DieselFuelCostPerLiter", 
                "costOffGrid.DieselFuelLitersConsumedPerKilowattHour", 
                "costOffGrid.DieselGeneratorActualSystemCapacity", 
                "costOffGrid.DieselGeneratorEffectiveHoursOfOperationPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(DieselFuelCostPerLiter) * self.get(DieselFuelLitersConsumedPerKilowattHour)) * self.get(DieselGeneratorActualSystemCapacity)) * self.get(DieselGeneratorEffectiveHoursOfOperationPerYear))\n", 
            "id": "costOffGrid.DieselFuelCostPerYear", 
            "name": "costOffGrid.DieselFuelCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": -0.075539898054728147, 
            "y": -0.19757801341322137
        }, 
        {
            "alias": "og_nod_lev", 
            "default": "", 
            "dep_string": "costOffGrid.OffGridSystemNodalDiscountedCost;demand.ProjectedNodalDiscountedDemand", 
            "dependencies": [
                "costOffGrid.OffGridSystemNodalDiscountedCost", 
                "demand.ProjectedNodalDiscountedDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(demand.ProjectedNodalDiscountedDemand) == 0):\n        return 0\n    return (self.get(OffGridSystemNodalDiscountedCost) / float(self.get(demand.ProjectedNodalDiscountedDemand)))\n", 
            "id": "costOffGrid.OffGridSystemNodalLevelizedCost", 
            "name": "costOffGrid.OffGridSystemNodalLevelizedCost", 
            "section": "costOffGrid", 
            "type": "OTHER", 
            "units": "dollars per kilowatt-hour", 
            "x": 0.042975395861652763, 
            "y": 0.046622904877569656
        }, 
        {
            "alias": "mg_dem_d", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'm'):\n        self.value += childVS.get(demand.ProjectedNodalDiscountedDemand)\n", 
            "id": "MiniGridSystemTotalDiscountedDemand", 
            "name": "MiniGridSystemTotalDiscountedDemand", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "kilowatt-hours", 
            "x": 0.0064346709647633595, 
            "y": 0.85995506774921393
        }, 
        {
            "alias": "ed_dc_unit", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.EducationFacilityUnitDemandPerEducationFacilityPerYear", 
            "name": "demand.EducationFacilityUnitDemandPerEducationFacilityPerYear", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "kilowatt-hours per year", 
            "x": -0.15822107186142276, 
            "y": 0.043306549486326125
        }, 
        {
            "alias": "tgt_ho_prt", 
            "default": 1, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.TargetHouseholdPenetrationRate", 
            "name": "demand.TargetHouseholdPenetrationRate", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": -0.093681518927351132, 
            "y": 0.022919604281724595
        }, 
        {
            "alias": "og_p_om", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicComponentInitialCost;costOffGrid.PhotovoltaicComponentOperationsAndMaintenanceCostPerYearAsFractionOfComponentCost", 
            "dependencies": [
                "costOffGrid.PhotovoltaicComponentInitialCost", 
                "costOffGrid.PhotovoltaicComponentOperationsAndMaintenanceCostPerYearAsFractionOfComponentCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PhotovoltaicComponentOperationsAndMaintenanceCostPerYearAsFractionOfComponentCost) * self.get(PhotovoltaicComponentInitialCost))\n", 
            "id": "costOffGrid.PhotovoltaicComponentOperationsAndMaintenanceCostPerYear", 
            "name": "costOffGrid.PhotovoltaicComponentOperationsAndMaintenanceCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.084599149777352986, 
            "y": -0.19142674438328316
        }, 
        {
            "alias": "og_nod_ddfc", 
            "default": "", 
            "dep_string": "costOffGrid.DieselFuelCostPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "costOffGrid.DieselFuelCostPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(DieselFuelCostPerYear) * self.get(finance.DiscountedCashFlowFactor))\n", 
            "id": "costOffGrid.OffGridSystemNodalDiscountedDieselFuelCost", 
            "name": "costOffGrid.OffGridSystemNodalDiscountedDieselFuelCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "", 
            "x": -0.023704036125585973, 
            "y": -0.065236723188904652
        }, 
        {
            "alias": "og_px_life", 
            "default": 10, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicBalanceLifetime", 
            "name": "costOffGrid.PhotovoltaicBalanceLifetime", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": -0.059973496522192797, 
            "y": -0.14094908459074082
        }, 
        {
            "alias": "gr_ic", 
            "default": "", 
            "dep_string": "costGrid.GridSocialInfrastructureCount;demand.TargetHouseholdCount", 
            "dependencies": [
                "costGrid.GridSocialInfrastructureCount", 
                "demand.TargetHouseholdCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(demand.TargetHouseholdCount) + self.get(GridSocialInfrastructureCount))\n", 
            "id": "costGrid.GridInternalConnectionCount", 
            "name": "costGrid.GridInternalConnectionCount", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "connection count", 
            "x": 0.01780995076126583, 
            "y": -0.031765139676543701
        }, 
        {
            "alias": "p_pkdem_pr", 
            "default": "", 
            "dep_string": "demand.DemandToPeakDemandConversionFactor;demand.ProjectedProductiveDemandPerYear", 
            "dependencies": [
                "demand.DemandToPeakDemandConversionFactor", 
                "demand.ProjectedProductiveDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(ProjectedProductiveDemandPerYear) * self.get(DemandToPeakDemandConversionFactor))\n", 
            "id": "demand.ProjectedPeakProductiveDemand", 
            "name": "demand.ProjectedPeakProductiveDemand", 
            "section": "demand", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "kilowatts", 
            "x": -0.16223888129441674, 
            "y": -0.10741522555808615
        }, 
        {
            "alias": "og_px_cf", 
            "default": 0.5, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicBalanceCostAsFractionOfPanelCost", 
            "name": "costOffGrid.PhotovoltaicBalanceCostAsFractionOfPanelCost", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": -0.074698610808963464, 
            "y": 0.0055066671361286351
        }, 
        {
            "alias": "og_p_rec", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicBalanceReplacementCostPerYear;costOffGrid.PhotovoltaicBatteryReplacementCostPerYear;costOffGrid.PhotovoltaicComponentOperationsAndMaintenanceCostPerYear;costOffGrid.PhotovoltaicPanelReplacementCostPerYear", 
            "dependencies": [
                "costOffGrid.PhotovoltaicBalanceReplacementCostPerYear", 
                "costOffGrid.PhotovoltaicBatteryReplacementCostPerYear", 
                "costOffGrid.PhotovoltaicComponentOperationsAndMaintenanceCostPerYear", 
                "costOffGrid.PhotovoltaicPanelReplacementCostPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(PhotovoltaicPanelReplacementCostPerYear) + self.get(PhotovoltaicBatteryReplacementCostPerYear)) + self.get(PhotovoltaicBalanceReplacementCostPerYear)) + self.get(PhotovoltaicComponentOperationsAndMaintenanceCostPerYear))\n", 
            "id": "costOffGrid.PhotovoltaicComponentRecurringCostPerYear", 
            "name": "costOffGrid.PhotovoltaicComponentRecurringCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.060538013185704946, 
            "y": -0.14178897116605335
        }, 
        {
            "alias": "p_li", 
            "default": "", 
            "dep_string": "demand.PublicLightingFacilityCountCurve;demographics.ProjectedPopulationCount", 
            "dependencies": [
                "demand.PublicLightingFacilityCountCurve", 
                "demographics.ProjectedPopulationCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return self.get(PublicLightingFacilityCountCurve).interpolate(self.get(demographics.ProjectedPopulationCount))\n", 
            "id": "demand.ProjectedPublicLightingFacilityCount", 
            "name": "demand.ProjectedPublicLightingFacilityCount", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "public lighting facility count", 
            "x": -0.099831874493537143, 
            "y": 0.06779636808460246
        }, 
        {
            "alias": "og_nod_d", 
            "default": "", 
            "dep_string": "costOffGrid.OffGridSystemInitialCost;costOffGrid.OffGridSystemRecurringCostPerYear;demand.ProjectedNodalDemandPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "costOffGrid.OffGridSystemInitialCost", 
                "costOffGrid.OffGridSystemRecurringCostPerYear", 
                "demand.ProjectedNodalDemandPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(demand.ProjectedNodalDemandPerYear) == 0):\n        return 0\n    return (self.get(OffGridSystemInitialCost) + (self.get(OffGridSystemRecurringCostPerYear) * self.get(finance.DiscountedCashFlowFactor)))\n", 
            "id": "costOffGrid.OffGridSystemNodalDiscountedCost", 
            "name": "costOffGrid.OffGridSystemNodalDiscountedCost", 
            "section": "costOffGrid", 
            "type": "OTHER", 
            "units": "dollars", 
            "x": 0.034900253150818683, 
            "y": -0.012629188379021371
        }, 
        {
            "alias": "mg_loss", 
            "default": 0.1, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.DistributionLoss", 
            "name": "costMiniGrid.DistributionLoss", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": 0.2190993475727534, 
            "y": 0.030956480824886608
        }, 
        {
            "alias": "mg_ct", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'm'):\n        self.value += 1\n", 
            "id": "MiniGridSystemTotal", 
            "name": "MiniGridSystemTotal", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "count", 
            "x": -0.80440885882221902, 
            "y": 0.77409113136632179
        }, 
        {
            "alias": "mg_g_acp", 
            "default": "", 
            "dep_string": "costMiniGrid.GenerationActualSystemCapacityCounts;costMiniGrid.GenerationAvailableSystemCapacities", 
            "dependencies": [
                "costMiniGrid.GenerationActualSystemCapacityCounts", 
                "costMiniGrid.GenerationAvailableSystemCapacities"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return numpy.dot(self.get(GenerationAvailableSystemCapacities), self.get(GenerationActualSystemCapacityCounts))\n", 
            "id": "costMiniGrid.GenerationActualSystemCapacity", 
            "name": "costMiniGrid.GenerationActualSystemCapacity", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "kilowatts", 
            "x": 0.33464229559581193, 
            "y": 0.10862849075801005
        }, 
        {
            "alias": "mg_ini_gc", 
            "default": "", 
            "dep_string": "costMiniGrid.GenerationCost;costMiniGrid.GenerationInstallationCost", 
            "dependencies": [
                "costMiniGrid.GenerationCost", 
                "costMiniGrid.GenerationInstallationCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(GenerationCost), self.get(GenerationInstallationCost)])\n", 
            "id": "costMiniGrid.MiniGridSystemInitialGenerationCost", 
            "name": "costMiniGrid.MiniGridSystemInitialGenerationCost", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars", 
            "x": 0.21462061584208841, 
            "y": 0.17608973783754861
        }, 
        {
            "alias": "ge_recm", 
            "default": "", 
            "dep_string": "costGrid.GridMediumVoltageLineOperationsAndMaintenanceCostPerMeterPerYear;costGrid.GridMediumVoltageLineReplacementCostPerMeterPerYear", 
            "dependencies": [
                "costGrid.GridMediumVoltageLineOperationsAndMaintenanceCostPerMeterPerYear", 
                "costGrid.GridMediumVoltageLineReplacementCostPerMeterPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridMediumVoltageLineOperationsAndMaintenanceCostPerMeterPerYear) + self.get(GridMediumVoltageLineReplacementCostPerMeterPerYear))\n", 
            "id": "costGrid.GridExternalSystemRecurringCostPerMeterPerYear", 
            "name": "costGrid.GridExternalSystemRecurringCostPerMeterPerYear", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per meter per year", 
            "x": -0.039132184058653666, 
            "y": 0.36141585636977369
        }, 
        {
            "alias": "pr_dc_pts", 
            "default": "500 1; 1000 3.06; 5000 3.57; 10000 5.10", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.ProductiveDemandCurvePoints", 
            "name": "demand.ProductiveDemandCurvePoints", 
            "section": "demand", 
            "type": "CURVE_POINTS", 
            "units": "population and multiplier list", 
            "x": 0.049994068612534116, 
            "y": -0.28828037034931592
        }, 
        {
            "alias": "og_p_omf", 
            "default": 0.05, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicComponentOperationsAndMaintenanceCostPerYearAsFractionOfComponentCost", 
            "name": "costOffGrid.PhotovoltaicComponentOperationsAndMaintenanceCostPerYearAsFractionOfComponentCost", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": 0.12494876098809723, 
            "y": -0.2533769617698341
        }, 
        {
            "alias": "pop_g_r", 
            "default": 0.015, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demographics.RuralPopulationGrowthRatePerYear", 
            "name": "demographics.RuralPopulationGrowthRatePerYear", 
            "section": "demographics", 
            "type": "LEAF_VAR", 
            "units": "fraction per year", 
            "x": -0.25072263109015136, 
            "y": 0.14389551432548903
        }, 
        {
            "alias": "economic_g", 
            "default": 0.06, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "finance.EconomicGrowthRatePerYear", 
            "name": "finance.EconomicGrowthRatePerYear", 
            "section": "finance", 
            "type": "LEAF_VAR", 
            "units": "fraction per year", 
            "x": -0.31179356394323093, 
            "y": 0.049710267551518299
        }, 
        {
            "alias": "mg_g_cps", 
            "default": "1000 750 500 400 200 150 100 70 32 19 12 6", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.GenerationAvailableSystemCapacities", 
            "name": "costMiniGrid.GenerationAvailableSystemCapacities", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "kilowatts list", 
            "x": 0.37005817915265726, 
            "y": 0.07899977681864162
        }, 
        {
            "alias": "og_p_loss", 
            "default": 0.1, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicComponentEfficiencyLoss", 
            "name": "costOffGrid.PhotovoltaicComponentEfficiencyLoss", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": -0.17264698524306057, 
            "y": -0.14846420336270708
        }, 
        {
            "alias": "og_pp_dcp", 
            "default": "", 
            "dep_string": "costOffGrid.PeakSunHoursPerYear;costOffGrid.PhotovoltaicComponentEfficiencyLoss;demand.ProjectedEducationFacilityDemandPerYear;demand.ProjectedHealthFacilityDemandPerYear;demand.ProjectedHouseholdDemandPerYear;demand.ProjectedPublicLightingFacilityDemandPerYear", 
            "dependencies": [
                "costOffGrid.PeakSunHoursPerYear", 
                "costOffGrid.PhotovoltaicComponentEfficiencyLoss", 
                "demand.ProjectedEducationFacilityDemandPerYear", 
                "demand.ProjectedHealthFacilityDemandPerYear", 
                "demand.ProjectedHouseholdDemandPerYear", 
                "demand.ProjectedPublicLightingFacilityDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    effectiveDemandPerYear = (sum([self.get(demand.ProjectedHouseholdDemandPerYear), self.get(demand.ProjectedHealthFacilityDemandPerYear), self.get(demand.ProjectedEducationFacilityDemandPerYear), self.get(demand.ProjectedPublicLightingFacilityDemandPerYear)]) / float((1 - self.get(PhotovoltaicComponentEfficiencyLoss))))\n    return (effectiveDemandPerYear / float(self.get(PeakSunHoursPerYear)))\n", 
            "id": "costOffGrid.PhotovoltaicPanelDesiredSystemCapacity", 
            "name": "costOffGrid.PhotovoltaicPanelDesiredSystemCapacity", 
            "section": "costOffGrid", 
            "type": "OTHER", 
            "units": "kilowatts", 
            "x": -0.12096442940197487, 
            "y": -0.091524879936936698
        }, 
        {
            "alias": "ho_size_u", 
            "default": 7.5, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demographics.UrbanMeanHouseholdSize", 
            "name": "demographics.UrbanMeanHouseholdSize", 
            "section": "demographics", 
            "type": "LEAF_VAR", 
            "units": "person count", 
            "x": -0.36075789547690473, 
            "y": -0.033151432398483074
        }, 
        {
            "alias": "og_tot_i", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'o'):\n        self.value += childVS.get(costOffGrid.OffGridSystemInitialCost)\n", 
            "id": "OffGridSystemTotalInitialCost", 
            "name": "OffGridSystemTotalInitialCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": 0.34726819826305744, 
            "y": -0.92470163511545778
        }, 
        {
            "alias": "pkdemf_r", 
            "default": 0.4, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.RuralPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
            "name": "demand.RuralPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": -0.36765184200513967, 
            "y": 0.037497886933716224
        }, 
        {
            "alias": "gi_ini", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineInitialCost;costGrid.GridInstallationCost;costGrid.GridTransformerCost;costGrid.LowVoltageLineEquipmentCost", 
            "dependencies": [
                "costDistribution.LowVoltageLineInitialCost", 
                "costGrid.GridInstallationCost", 
                "costGrid.GridTransformerCost", 
                "costGrid.LowVoltageLineEquipmentCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(GridInstallationCost), self.get(GridTransformerCost), self.get(LowVoltageLineEquipmentCost), self.get(costDistribution.LowVoltageLineInitialCost)])\n", 
            "id": "costGrid.GridInternalSystemInitialCost", 
            "name": "costGrid.GridInternalSystemInitialCost", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars", 
            "x": 0.14357337895403777, 
            "y": 0.007743933255678446
        }, 
        {
            "alias": "og_nod_ddc", 
            "default": "", 
            "dep_string": "costOffGrid.DieselComponentInitialCost;costOffGrid.DieselComponentRecurringCostPerYear;demand.ProjectedNodalDemandPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "costOffGrid.DieselComponentInitialCost", 
                "costOffGrid.DieselComponentRecurringCostPerYear", 
                "demand.ProjectedNodalDemandPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(demand.ProjectedNodalDemandPerYear) == 0):\n        return 0\n    return (self.get(DieselComponentInitialCost) + (self.get(DieselComponentRecurringCostPerYear) * self.get(finance.DiscountedCashFlowFactor)))\n", 
            "id": "costOffGrid.OffGridSystemNodalDiscountedDieselCost", 
            "name": "costOffGrid.OffGridSystemNodalDiscountedDieselCost", 
            "section": "costOffGrid", 
            "type": "OTHER", 
            "units": "dollars", 
            "x": 0.0048419055729160745, 
            "y": -0.088671489889402572
        }, 
        {
            "alias": "mg_g_rep", 
            "default": "", 
            "dep_string": "costMiniGrid.GenerationCost;costMiniGrid.GenerationLifetime", 
            "dependencies": [
                "costMiniGrid.GenerationCost", 
                "costMiniGrid.GenerationLifetime"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GenerationCost) / float(self.get(GenerationLifetime)))\n", 
            "id": "costMiniGrid.GenerationReplacementCostPerYear", 
            "name": "costMiniGrid.GenerationReplacementCostPerYear", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.2813570539564223, 
            "y": 0.12254415876855378
        }, 
        {
            "alias": "co_cc_t", 
            "default": "ZeroLogisticLinear", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.CommercialFacilityCountCurveType", 
            "name": "demand.CommercialFacilityCountCurveType", 
            "section": "demand", 
            "type": "CURVE_TYPE", 
            "units": "", 
            "x": -0.4086944605354676, 
            "y": -0.050675620977450611
        }, 
        {
            "alias": "gr_tot_drc", 
            "default": "", 
            "dep_string": "GridSystemTotalExternalDiscountedRecurringCost;GridSystemTotalInternalDiscountedRecurringCost", 
            "dependencies": [
                "GridSystemTotalExternalDiscountedRecurringCost", 
                "GridSystemTotalInternalDiscountedRecurringCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    intlCostPerYear = self.get(GridSystemTotalExternalDiscountedRecurringCost)\n    extlCostPerYear = self.get(GridSystemTotalInternalDiscountedRecurringCost)\n    return (intlCostPerYear + extlCostPerYear)\n", 
            "id": "GridSystemTotalDiscountedRecurringCost", 
            "name": "GridSystemTotalDiscountedRecurringCost", 
            "section": "", 
            "type": "OTHER", 
            "units": "dollars", 
            "x": -0.11958990278188167, 
            "y": 0.26157497768584248
        }, 
        {
            "alias": "pkdemf", 
            "default": "", 
            "dep_string": "demand.RuralPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours;demand.UrbanPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours;demographics.IsRural", 
            "dependencies": [
                "demand.RuralPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
                "demand.UrbanPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
                "demographics.IsRural"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(RuralPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours) if self.get(demographics.IsRural) else self.get(UrbanPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours))\n", 
            "id": "demand.PeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
            "name": "demand.PeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
            "section": "demand", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "", 
            "x": -0.29819478778343805, 
            "y": 0.0084835545583083569
        }, 
        {
            "alias": "he_cc_pts", 
            "default": "50 0.16; 500 1.6; 5000 5; 10000 20", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.HealthFacilityCountCurvePoints", 
            "name": "demand.HealthFacilityCountCurvePoints", 
            "section": "demand", 
            "type": "CURVE_POINTS", 
            "units": "population and facility count list", 
            "x": -0.28283433682188236, 
            "y": -0.25424341499169423
        }, 
        {
            "alias": "og_pp_acp", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicPanelActualSystemCapacityCounts;costOffGrid.PhotovoltaicPanelAvailableSystemCapacities", 
            "dependencies": [
                "costOffGrid.PhotovoltaicPanelActualSystemCapacityCounts", 
                "costOffGrid.PhotovoltaicPanelAvailableSystemCapacities"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return numpy.dot(self.get(PhotovoltaicPanelAvailableSystemCapacities), self.get(PhotovoltaicPanelActualSystemCapacityCounts))\n", 
            "id": "costOffGrid.PhotovoltaicPanelActualSystemCapacity", 
            "name": "costOffGrid.PhotovoltaicPanelActualSystemCapacity", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "kilowatts", 
            "x": 0.0055431130850712241, 
            "y": -0.16312958131435784
        }, 
        {
            "alias": "mg_le", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineEquipmentCostPerConnection;demand.TargetHouseholdCount", 
            "dependencies": [
                "costDistribution.LowVoltageLineEquipmentCostPerConnection", 
                "demand.TargetHouseholdCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(costDistribution.LowVoltageLineEquipmentCostPerConnection) * self.get(demand.TargetHouseholdCount))\n", 
            "id": "costMiniGrid.LowVoltageLineEquipmentCost", 
            "name": "costMiniGrid.LowVoltageLineEquipmentCost", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.10141602376906864, 
            "y": 0.026825465759531934
        }, 
        {
            "alias": "ed_cc_t", 
            "default": "ZeroLogisticLinear", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.EducationFacilityCountCurveType", 
            "name": "demand.EducationFacilityCountCurveType", 
            "section": "demand", 
            "type": "CURVE_TYPE", 
            "units": "", 
            "x": -0.063983552902056984, 
            "y": 0.29361751645827233
        }, 
        {
            "alias": "ho_dc", 
            "default": "", 
            "dep_string": "demand.HouseholdDemandCurvePoints;demand.HouseholdDemandCurveType", 
            "dependencies": [
                "demand.HouseholdDemandCurvePoints", 
                "demand.HouseholdDemandCurveType"
            ], 
            "fun_src": "\n\ndef compute(self):\n    curveType = self.get(HouseholdDemandCurveType)\n    curvePoints = self.get(HouseholdDemandCurvePoints)\n    return curve.fit(curveType, curvePoints)\n", 
            "id": "demand.HouseholdDemandCurve", 
            "name": "demand.HouseholdDemandCurve", 
            "section": "demand", 
            "type": "CURVE_FUN", 
            "units": "", 
            "x": -0.02969760034070482, 
            "y": -0.22388992669261693
        }, 
        {
            "alias": "ho_dc_pts", 
            "default": "500 1; 1000 1.56; 5000 6.16; 10000 11.5", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.HouseholdDemandCurvePoints", 
            "name": "demand.HouseholdDemandCurvePoints", 
            "section": "demand", 
            "type": "CURVE_POINTS", 
            "units": "population and multiplier list", 
            "x": -0.0058019394168653381, 
            "y": -0.30411149375081781
        }, 
        {
            "alias": "mg_esdpy", 
            "default": "", 
            "dep_string": "costMiniGrid.DistributionLoss;costMiniGrid.MinimumEnergyStorageCapacity;costMiniGrid.PercentOfDailyKilowattHourLoadRequiringStorage;demand.ProjectedNodalDemandPerYear", 
            "dependencies": [
                "costMiniGrid.DistributionLoss", 
                "costMiniGrid.MinimumEnergyStorageCapacity", 
                "costMiniGrid.PercentOfDailyKilowattHourLoadRequiringStorage", 
                "demand.ProjectedNodalDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    effectiveDemandPerYear = (self.get(demand.ProjectedNodalDemandPerYear) / float((1 - self.get(DistributionLoss))))\n    return max((self.get(MinimumEnergyStorageCapacity) * 365), (effectiveDemandPerYear * float(self.get(PercentOfDailyKilowattHourLoadRequiringStorage))))\n", 
            "id": "costMiniGrid.EnergyStorageDemandPerYear", 
            "name": "costMiniGrid.EnergyStorageDemandPerYear", 
            "section": "costMiniGrid", 
            "type": "OTHER", 
            "units": "kilowatt-hours per year", 
            "x": 0.15925937698236989, 
            "y": 0.03841603689445354
        }, 
        {
            "alias": "pr_dc_t", 
            "default": "ZeroLogisticLinear", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.ProductiveDemandCurveType", 
            "name": "demand.ProductiveDemandCurveType", 
            "section": "demand", 
            "type": "CURVE_TYPE", 
            "units": "", 
            "x": 0.064120141130273978, 
            "y": -0.27868749232965262
        }, 
        {
            "alias": "mg_g_i", 
            "default": "", 
            "dep_string": "costMiniGrid.GenerationCost;costMiniGrid.GenerationInstallationCostAsFractionOfGenerationCost", 
            "dependencies": [
                "costMiniGrid.GenerationCost", 
                "costMiniGrid.GenerationInstallationCostAsFractionOfGenerationCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GenerationInstallationCostAsFractionOfGenerationCost) * self.get(GenerationCost))\n", 
            "id": "costMiniGrid.GenerationInstallationCost", 
            "name": "costMiniGrid.GenerationInstallationCost", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.24583573805601236, 
            "y": 0.17720563151224819
        }, 
        {
            "alias": "di_ll_life", 
            "default": 10, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costDistribution.LowVoltageLineLifetime", 
            "name": "costDistribution.LowVoltageLineLifetime", 
            "section": "costDistribution", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": -0.0064411412225270116, 
            "y": 0.17976404145837116
        }, 
        {
            "alias": "pop", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demographics.PopulationCount", 
            "name": "demographics.PopulationCount", 
            "section": "demographics", 
            "type": "LEAF_VAR", 
            "units": "person count", 
            "x": -0.26463883769682056, 
            "y": 0.13500922223698286
        }, 
        {
            "alias": "so_dc", 
            "default": "", 
            "dep_string": "demand.SocialInfrastructureDemandCurvePoints;demand.SocialInfrastructureDemandCurveType", 
            "dependencies": [
                "demand.SocialInfrastructureDemandCurvePoints", 
                "demand.SocialInfrastructureDemandCurveType"
            ], 
            "fun_src": "\n\ndef compute(self):\n    curveType = self.get(SocialInfrastructureDemandCurveType)\n    curvePoints = self.get(SocialInfrastructureDemandCurvePoints)\n    return curve.fit(curveType, curvePoints)\n", 
            "id": "demand.SocialInfrastructureDemandCurve", 
            "name": "demand.SocialInfrastructureDemandCurve", 
            "section": "demand", 
            "type": "CURVE_FUN", 
            "units": "", 
            "x": -0.16478554647544189, 
            "y": -0.046427638921700071
        }, 
        {
            "alias": "pr_dc", 
            "default": "", 
            "dep_string": "demand.ProductiveDemandCurvePoints;demand.ProductiveDemandCurveType", 
            "dependencies": [
                "demand.ProductiveDemandCurvePoints", 
                "demand.ProductiveDemandCurveType"
            ], 
            "fun_src": "\n\ndef compute(self):\n    curveType = self.get(ProductiveDemandCurveType)\n    curvePoints = self.get(ProductiveDemandCurvePoints)\n    return curve.fit(curveType, curvePoints)\n", 
            "id": "demand.ProductiveDemandCurve", 
            "name": "demand.ProductiveDemandCurve", 
            "section": "demand", 
            "type": "CURVE_FUN", 
            "units": "", 
            "x": 0.0099861628890079539, 
            "y": -0.21369436423713964
        }, 
        {
            "alias": "gr_ml_cm", 
            "default": 20, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridMediumVoltageLineCostPerMeter", 
            "name": "costGrid.GridMediumVoltageLineCostPerMeter", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per meter", 
            "x": -0.03420289358973725, 
            "y": 0.41213321298534955
        }, 
        {
            "alias": "gr_ml_omm", 
            "default": "", 
            "dep_string": "costGrid.GridMediumVoltageLineCostPerMeter;costGrid.GridMediumVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost", 
            "dependencies": [
                "costGrid.GridMediumVoltageLineCostPerMeter", 
                "costGrid.GridMediumVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridMediumVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost) * self.get(GridMediumVoltageLineCostPerMeter))\n", 
            "id": "costGrid.GridMediumVoltageLineOperationsAndMaintenanceCostPerMeterPerYear", 
            "name": "costGrid.GridMediumVoltageLineOperationsAndMaintenanceCostPerMeterPerYear", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per meter per year", 
            "x": -0.046479935494267217, 
            "y": 0.44816115644287041
        }, 
        {
            "alias": "mg_escpy", 
            "default": "", 
            "dep_string": "costMiniGrid.EnergyStorageCostPerKilowattHour;costMiniGrid.EnergyStorageDemandPerYear", 
            "dependencies": [
                "costMiniGrid.EnergyStorageCostPerKilowattHour", 
                "costMiniGrid.EnergyStorageDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(EnergyStorageCostPerKilowattHour) * self.get(EnergyStorageDemandPerYear))\n", 
            "id": "costMiniGrid.EnergyStorageCostPerYear", 
            "name": "costMiniGrid.EnergyStorageCostPerYear", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.18641196719444145, 
            "y": 0.129782707021349
        }, 
        {
            "alias": "gr_tot_ext_ic", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    childDataset = childVS.state[0]\n    childNode = childVS.state[1]\n    if ((childVS.get(System)[0] == 'g') and (not childDataset.wasNodeAlreadyConnected(childNode))):\n        newConnections = childDataset.cycleConnections(childNode, is_existing=False)\n        newConnectionLengthHalved = (sum((x.weight for x in newConnections)) / 2.0)\n        externalCostPerMeter = childVS.get(costGrid.GridExternalSystemInitialCostPerMeter)\n        externalCost = (externalCostPerMeter * newConnectionLengthHalved)\n        self.value += externalCost\n", 
            "id": "GridSystemTotalExternalInitialCost", 
            "name": "GridSystemTotalExternalInitialCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.57827467679663114, 
            "y": -0.70621100357594524
        }, 
        {
            "alias": "og_pb_hkw", 
            "default": 5, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicBatteryKilowattHoursPerPhotovoltaicComponentKilowatt", 
            "name": "costOffGrid.PhotovoltaicBatteryKilowattHoursPerPhotovoltaicComponentKilowatt", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "kilowatt-hours per kilowatt", 
            "x": 0.14460310918415284, 
            "y": -0.19176082916644838
        }, 
        {
            "alias": "gr_tot_enl", 
            "default": "", 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef compute(self):\n    return self.state[0].sumNetworkWeight(is_existing=True)\n", 
            "id": "GridSystemTotalExistingNetworkLength", 
            "name": "GridSystemTotalExistingNetworkLength", 
            "section": "", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "meters", 
            "x": 0.50104546865572375, 
            "y": 0.84480471890476538
        }, 
        {
            "alias": "mg_u_fctr", 
            "default": 0.416667, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.UtilizationFactor", 
            "name": "costMiniGrid.UtilizationFactor", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": 0.27570530808341748, 
            "y": 0.0063076188785349385
        }, 
        {
            "alias": "og_p_ini", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicBalanceCost;costOffGrid.PhotovoltaicBatteryCost;costOffGrid.PhotovoltaicPanelCost", 
            "dependencies": [
                "costOffGrid.PhotovoltaicBalanceCost", 
                "costOffGrid.PhotovoltaicBatteryCost", 
                "costOffGrid.PhotovoltaicPanelCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return ((self.get(PhotovoltaicPanelCost) + self.get(PhotovoltaicBatteryCost)) + self.get(PhotovoltaicBalanceCost))\n", 
            "id": "costOffGrid.PhotovoltaicComponentInitialCost", 
            "name": "costOffGrid.PhotovoltaicComponentInitialCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.039422778564028114, 
            "y": -0.12289540201072428
        }, 
        {
            "alias": "p_dem_ed", 
            "default": "", 
            "dep_string": "demand.EducationFacilityUnitDemandPerEducationFacilityPerYear;demand.ProjectedEducationFacilityCount;demand.SocialInfrastructureDemandCurve;demographics.ProjectedPopulationCount;finance.ElectricityDemandMultiplier", 
            "dependencies": [
                "demand.EducationFacilityUnitDemandPerEducationFacilityPerYear", 
                "demand.ProjectedEducationFacilityCount", 
                "demand.SocialInfrastructureDemandCurve", 
                "demographics.ProjectedPopulationCount", 
                "finance.ElectricityDemandMultiplier"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(finance.ElectricityDemandMultiplier) * self.get(SocialInfrastructureDemandCurve).interpolate(self.get(demographics.ProjectedPopulationCount))) * self.get(EducationFacilityUnitDemandPerEducationFacilityPerYear)) * self.get(ProjectedEducationFacilityCount))\n", 
            "id": "demand.ProjectedEducationFacilityDemandPerYear", 
            "name": "demand.ProjectedEducationFacilityDemandPerYear", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "kilowatt-hours per year", 
            "x": -0.10337718433438405, 
            "y": -0.0045615596413397189
        }, 
        {
            "alias": "gr_ml_omf", 
            "default": 0.01, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridMediumVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost", 
            "name": "costGrid.GridMediumVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": -0.054277282665537128, 
            "y": 0.51459735816883889
        }, 
        {
            "alias": "gr_tr_acps", 
            "default": "", 
            "dep_string": "costGrid.GridTransformerAvailableSystemCapacities;costGrid.GridTransformerDesiredSystemCapacity", 
            "dependencies": [
                "costGrid.GridTransformerAvailableSystemCapacities", 
                "costGrid.GridTransformerDesiredSystemCapacity"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return metric.computeSystemCounts(self.get(GridTransformerDesiredSystemCapacity), self.get(GridTransformerAvailableSystemCapacities))\n", 
            "id": "costGrid.GridTransformerActualSystemCapacityCounts", 
            "name": "costGrid.GridTransformerActualSystemCapacityCounts", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "capacity count list", 
            "x": 0.18201010130209153, 
            "y": 0.085502442772393272
        }, 
        {
            "alias": "mg_nod_lev", 
            "default": "", 
            "dep_string": "costMiniGrid.MiniGridSystemNodalDiscountedCost;demand.ProjectedNodalDiscountedDemand", 
            "dependencies": [
                "costMiniGrid.MiniGridSystemNodalDiscountedCost", 
                "demand.ProjectedNodalDiscountedDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(demand.ProjectedNodalDiscountedDemand) == 0):\n        return 0\n    return (self.get(MiniGridSystemNodalDiscountedCost) / float(self.get(demand.ProjectedNodalDiscountedDemand)))\n", 
            "id": "costMiniGrid.MiniGridSystemNodalLevelizedCost", 
            "name": "costMiniGrid.MiniGridSystemNodalLevelizedCost", 
            "section": "costMiniGrid", 
            "type": "OTHER", 
            "units": "dollars per kilowatt-hour", 
            "x": 0.068547698128398143, 
            "y": 0.10957775506438112
        }, 
        {
            "alias": "og_pb_ckwh", 
            "default": 400, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicBatteryCostPerKilowattHour", 
            "name": "costOffGrid.PhotovoltaicBatteryCostPerKilowattHour", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per kilowatt-hour", 
            "x": 0.14508381492624145, 
            "y": -0.16612552369159878
        }, 
        {
            "alias": "og_dg_dcp", 
            "default": "", 
            "dep_string": "demand.ProjectedPeakCommercialFacilityDemand;demand.ProjectedPeakProductiveDemand", 
            "dependencies": [
                "demand.ProjectedPeakCommercialFacilityDemand", 
                "demand.ProjectedPeakProductiveDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(demand.ProjectedPeakCommercialFacilityDemand), self.get(demand.ProjectedPeakProductiveDemand)])\n", 
            "id": "costOffGrid.DieselGeneratorDesiredSystemCapacity", 
            "name": "costOffGrid.DieselGeneratorDesiredSystemCapacity", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "kilowatts", 
            "x": -0.20373044283760819, 
            "y": -0.17032801413918922
        }, 
        {
            "alias": "og_dg_rep", 
            "default": "", 
            "dep_string": "costOffGrid.DieselGeneratorCost;costOffGrid.DieselGeneratorLifetime", 
            "dependencies": [
                "costOffGrid.DieselGeneratorCost", 
                "costOffGrid.DieselGeneratorLifetime"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(DieselGeneratorCost) / float(self.get(DieselGeneratorLifetime)))\n", 
            "id": "costOffGrid.DieselGeneratorReplacementCostPerYear", 
            "name": "costOffGrid.DieselGeneratorReplacementCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": -0.014297375578522552, 
            "y": -0.317416673554066
        }, 
        {
            "alias": "system", 
            "default": "", 
            "dep_string": "costMiniGrid.MiniGridSystemNodalDiscountedCost;costOffGrid.OffGridSystemNodalDiscountedCost;demand.ProjectedNodalDemandPerYear", 
            "dependencies": [
                "costMiniGrid.MiniGridSystemNodalDiscountedCost", 
                "costOffGrid.OffGridSystemNodalDiscountedCost", 
                "demand.ProjectedNodalDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(demand.ProjectedNodalDemandPerYear) == 0):\n        return 'unelectrified'\n    elif self.state[0].isNodeConnected(self.state[1]):\n        return 'grid'\n    elif (self.get(costMiniGrid.MiniGridSystemNodalDiscountedCost) < self.get(costOffGrid.OffGridSystemNodalDiscountedCost)):\n        return 'mini-grid'\n    else:\n        return 'off-grid'\n", 
            "id": "System", 
            "name": "System", 
            "section": "", 
            "type": "OTHER", 
            "units": "", 
            "x": 0.059000804951821355, 
            "y": 0.017425111157561433
        }, 
        {
            "alias": "p_he", 
            "default": "", 
            "dep_string": "demand.HealthFacilityCountCurve;demographics.ProjectedPopulationCount", 
            "dependencies": [
                "demand.HealthFacilityCountCurve", 
                "demographics.ProjectedPopulationCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return self.get(HealthFacilityCountCurve).interpolate(self.get(demographics.ProjectedPopulationCount))\n", 
            "id": "demand.ProjectedHealthFacilityCount", 
            "name": "demand.ProjectedHealthFacilityCount", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "health facility count", 
            "x": -0.16363092383182259, 
            "y": -0.088010148142389624
        }, 
        {
            "alias": "ge_nodm_drcpm", 
            "default": "", 
            "dep_string": "costGrid.GridExternalSystemRecurringCostPerMeterPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "costGrid.GridExternalSystemRecurringCostPerMeterPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridExternalSystemRecurringCostPerMeterPerYear) * self.get(finance.DiscountedCashFlowFactor))\n", 
            "id": "costGrid.GridExternalSystemNodalDiscountedRecurringCostPerMeter", 
            "name": "costGrid.GridExternalSystemNodalDiscountedRecurringCostPerMeter", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per meter", 
            "x": -0.0090851140322478052, 
            "y": 0.22616633524882876
        }, 
        {
            "alias": "og_tot_d", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'o'):\n        self.value += childVS.get(costOffGrid.OffGridSystemNodalDiscountedCost)\n", 
            "id": "OffGridSystemTotalDiscountedCost", 
            "name": "OffGridSystemTotalDiscountedCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": 0.83253201352335748, 
            "y": -0.18674297449867897
        }, 
        {
            "alias": "demf", 
            "default": "", 
            "dep_string": "finance.ElectricityDemandGrowthRatePerYear;finance.TimeHorizon", 
            "dependencies": [
                "finance.ElectricityDemandGrowthRatePerYear", 
                "finance.TimeHorizon"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return ((1 + self.get(ElectricityDemandGrowthRatePerYear)) ** self.get(TimeHorizon))\n", 
            "id": "finance.ElectricityDemandMultiplier", 
            "name": "finance.ElectricityDemandMultiplier", 
            "section": "finance", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "", 
            "x": -0.13156771859487254, 
            "y": -0.02532319983934574
        }, 
        {
            "alias": "mg_pd_kwhrs", 
            "default": 1.0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.PercentOfDailyKilowattHourLoadRequiringStorage", 
            "name": "costMiniGrid.PercentOfDailyKilowattHourLoadRequiringStorage", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": 0.23525628914490043, 
            "y": 0.022200133109288027
        }, 
        {
            "alias": "og_tot_lev", 
            "default": "", 
            "dep_string": "OffGridSystemTotalDiscountedCost;OffGridSystemTotalDiscountedDemand", 
            "dependencies": [
                "OffGridSystemTotalDiscountedCost", 
                "OffGridSystemTotalDiscountedDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(OffGridSystemTotalDiscountedDemand) == 0):\n        return 0\n    return (self.get(OffGridSystemTotalDiscountedCost) / float(self.get(OffGridSystemTotalDiscountedDemand)))\n", 
            "id": "OffGridSystemTotalLevelizedCost", 
            "name": "OffGridSystemTotalLevelizedCost", 
            "section": "", 
            "type": "OTHER", 
            "units": "dollars per kilowatt-hour", 
            "x": 0.79242904999032893, 
            "y": -0.17711482116227353
        }, 
        {
            "alias": "dem_pkdemf", 
            "default": "", 
            "dep_string": "demand.PeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours;demand.PeakElectricalHoursOfOperationPerYear", 
            "dependencies": [
                "demand.PeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
                "demand.PeakElectricalHoursOfOperationPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours) / float(self.get(PeakElectricalHoursOfOperationPerYear)))\n", 
            "id": "demand.DemandToPeakDemandConversionFactor", 
            "name": "demand.DemandToPeakDemandConversionFactor", 
            "section": "demand", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "", 
            "x": -0.187846717015, 
            "y": -0.027556057454075387
        }, 
        {
            "alias": "p_dem_co", 
            "default": "", 
            "dep_string": "demand.CommercialFacilityUnitDemandPerCommercialFacilityPerYear;demand.ProjectedCommercialFacilityCount;demand.SocialInfrastructureDemandCurve;demographics.ProjectedPopulationCount;finance.ElectricityDemandMultiplier", 
            "dependencies": [
                "demand.CommercialFacilityUnitDemandPerCommercialFacilityPerYear", 
                "demand.ProjectedCommercialFacilityCount", 
                "demand.SocialInfrastructureDemandCurve", 
                "demographics.ProjectedPopulationCount", 
                "finance.ElectricityDemandMultiplier"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(finance.ElectricityDemandMultiplier) * self.get(SocialInfrastructureDemandCurve).interpolate(self.get(demographics.ProjectedPopulationCount))) * self.get(CommercialFacilityUnitDemandPerCommercialFacilityPerYear)) * self.get(ProjectedCommercialFacilityCount))\n", 
            "id": "demand.ProjectedCommercialFacilityDemandPerYear", 
            "name": "demand.ProjectedCommercialFacilityDemandPerYear", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "kilowatt-hours per year", 
            "x": -0.12658587546676386, 
            "y": -0.065168955316557406
        }, 
        {
            "alias": "pksu_hr", 
            "default": 1320, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PeakSunHoursPerYear", 
            "name": "costOffGrid.PeakSunHoursPerYear", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "hours per year", 
            "x": -0.18997920633039761, 
            "y": -0.13503678601822108
        }, 
        {
            "alias": "he_cc_t", 
            "default": "ZeroLogisticLinear", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.HealthFacilityCountCurveType", 
            "name": "demand.HealthFacilityCountCurveType", 
            "section": "demand", 
            "type": "CURVE_TYPE", 
            "units": "", 
            "x": -0.26573801900833777, 
            "y": -0.26775162087465243
        }, 
        {
            "alias": "so_dc_pts", 
            "default": "500 1; 1000 1.5; 5000 2.25; 10000 3.375", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.SocialInfrastructureDemandCurvePoints", 
            "name": "demand.SocialInfrastructureDemandCurvePoints", 
            "section": "demand", 
            "type": "CURVE_POINTS", 
            "units": "population and multiplier list", 
            "x": -0.23663166276536232, 
            "y": -0.077718215755001388
        }, 
        {
            "alias": "og_dg_mnhr", 
            "default": 1460, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.DieselGeneratorMinimumHoursOfOperationPerYear", 
            "name": "costOffGrid.DieselGeneratorMinimumHoursOfOperationPerYear", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "hours per year", 
            "x": -0.16637376451663868, 
            "y": -0.22702507485430923
        }, 
        {
            "alias": "di_ll_rec", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineOperationsAndMaintenanceCostPerYear;costDistribution.LowVoltageLineReplacementCostPerYear", 
            "dependencies": [
                "costDistribution.LowVoltageLineOperationsAndMaintenanceCostPerYear", 
                "costDistribution.LowVoltageLineReplacementCostPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(LowVoltageLineOperationsAndMaintenanceCostPerYear), self.get(LowVoltageLineReplacementCostPerYear)])\n", 
            "id": "costDistribution.LowVoltageLineRecurringCostPerYear", 
            "name": "costDistribution.LowVoltageLineRecurringCostPerYear", 
            "section": "costDistribution", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.12500840885953812, 
            "y": 0.10046407322838427
        }, 
        {
            "alias": "di_ll_omf", 
            "default": 0.01, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costDistribution.LowVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost", 
            "name": "costDistribution.LowVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost", 
            "section": "costDistribution", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": 0.0043331858766675318, 
            "y": 0.21032668475840977
        }, 
        {
            "alias": "mg_escpk", 
            "default": 0.54, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.EnergyStorageCostPerKilowattHour", 
            "name": "costMiniGrid.EnergyStorageCostPerKilowattHour", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per kilowatt-hour", 
            "x": 0.23194774636011695, 
            "y": 0.19658752901927948
        }, 
        {
            "alias": "elasticity", 
            "default": 1.5, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "finance.ElasticityOfElectricityDemand", 
            "name": "finance.ElasticityOfElectricityDemand", 
            "section": "finance", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": -0.30507271936499097, 
            "y": 0.067697238545229188
        }, 
        {
            "alias": "og_dg_ini", 
            "default": "", 
            "dep_string": "costOffGrid.DieselGeneratorActualSystemCapacity;costOffGrid.DieselGeneratorCostPerDieselSystemKilowatt", 
            "dependencies": [
                "costOffGrid.DieselGeneratorActualSystemCapacity", 
                "costOffGrid.DieselGeneratorCostPerDieselSystemKilowatt"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(DieselGeneratorCostPerDieselSystemKilowatt) * self.get(DieselGeneratorActualSystemCapacity))\n", 
            "id": "costOffGrid.DieselGeneratorCost", 
            "name": "costOffGrid.DieselGeneratorCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": -0.062383509403830584, 
            "y": -0.29804110039825626
        }, 
        {
            "alias": "time", 
            "default": 10, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "finance.TimeHorizon", 
            "name": "finance.TimeHorizon", 
            "section": "finance", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": -0.10811997804555372, 
            "y": 0.057807880038353847
        }, 
        {
            "alias": "ge_nodm_d", 
            "default": "", 
            "dep_string": "costGrid.GridExternalSystemInitialCostPerMeter;costGrid.GridExternalSystemNodalDiscountedRecurringCostPerMeter", 
            "dependencies": [
                "costGrid.GridExternalSystemInitialCostPerMeter", 
                "costGrid.GridExternalSystemNodalDiscountedRecurringCostPerMeter"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridExternalSystemInitialCostPerMeter) + self.get(GridExternalSystemNodalDiscountedRecurringCostPerMeter))\n", 
            "id": "costGrid.GridExternalSystemNodalDiscountedCostPerMeter", 
            "name": "costGrid.GridExternalSystemNodalDiscountedCostPerMeter", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per meter", 
            "x": 0.026768807740232475, 
            "y": 0.22712288595296329
        }, 
        {
            "alias": "gr_tot_idrc", 
            "default": 0, 
            "dep_string": "finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    childDataset = childVS.state[0]\n    childNode = childVS.state[1]\n    if ((childVS.get(System)[0] == 'g') and (not childDataset.wasNodeAlreadyConnected(childNode))):\n        internalAnnualCost = childVS.get(costGrid.GridInternalSystemRecurringCostPerYear)\n        dcff = self.get(finance.DiscountedCashFlowFactor)\n        self.value += (dcff * internalAnnualCost)\n", 
            "id": "GridSystemTotalInternalDiscountedRecurringCost", 
            "name": "GridSystemTotalInternalDiscountedRecurringCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.056831963285370539, 
            "y": 0.17503754326674409
        }, 
        {
            "alias": "li_cc_pts", 
            "default": "50 0.1; 500 1; 5000 7; 10000 25", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.PublicLightingFacilityCountCurvePoints", 
            "name": "demand.PublicLightingFacilityCountCurvePoints", 
            "section": "demand", 
            "type": "CURVE_POINTS", 
            "units": "population and facility count list", 
            "x": -0.031104221522797661, 
            "y": 0.26220283713860731
        }, 
        {
            "alias": "mg_g_ck", 
            "default": 150, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.GenerationCostPerSystemKilowatt", 
            "name": "costMiniGrid.GenerationCostPerSystemKilowatt", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per kilowatt", 
            "x": 0.33323777095260354, 
            "y": 0.19664607355030886
        }, 
        {
            "alias": "co_cc_pts", 
            "default": "50 0.12; 500 1.2; 5000 25; 10000 125", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.CommercialFacilityCountCurvePoints", 
            "name": "demand.CommercialFacilityCountCurvePoints", 
            "section": "demand", 
            "type": "CURVE_POINTS", 
            "units": "population and facility count list", 
            "x": -0.40982969042490897, 
            "y": -0.028601956328687551
        }, 
        {
            "alias": "gr_tr_om", 
            "default": "", 
            "dep_string": "costGrid.GridTransformerCost;costGrid.GridTransformerOperationsAndMaintenanceCostPerYearAsFractionOfTransformerCost", 
            "dependencies": [
                "costGrid.GridTransformerCost", 
                "costGrid.GridTransformerOperationsAndMaintenanceCostPerYearAsFractionOfTransformerCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridTransformerOperationsAndMaintenanceCostPerYearAsFractionOfTransformerCost) * self.get(GridTransformerCost))\n", 
            "id": "costGrid.GridTransformerOperationsAndMaintenanceCostPerYear", 
            "name": "costGrid.GridTransformerOperationsAndMaintenanceCostPerYear", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.26655318471848582, 
            "y": -0.043073133764907852
        }, 
        {
            "alias": "gi_rec", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineRecurringCostPerYear;costGrid.GridElectricityCostPerYear;costGrid.GridTransformerOperationsAndMaintenanceCostPerYear;costGrid.GridTransformerReplacementCostPerYear;costGrid.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear", 
            "dependencies": [
                "costDistribution.LowVoltageLineRecurringCostPerYear", 
                "costGrid.GridElectricityCostPerYear", 
                "costGrid.GridTransformerOperationsAndMaintenanceCostPerYear", 
                "costGrid.GridTransformerReplacementCostPerYear", 
                "costGrid.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(GridTransformerOperationsAndMaintenanceCostPerYear), self.get(GridTransformerReplacementCostPerYear), self.get(GridElectricityCostPerYear), self.get(LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear), self.get(costDistribution.LowVoltageLineRecurringCostPerYear)])\n", 
            "id": "costGrid.GridInternalSystemRecurringCostPerYear", 
            "name": "costGrid.GridInternalSystemRecurringCostPerYear", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.17743180578897008, 
            "y": 0.0074058927919751763
        }, 
        {
            "alias": "gr_tr_cps", 
            "default": "1000 900 800 700 600 500 400 300 200 100 90 80 70 60 50 40 30 20 15 5", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridTransformerAvailableSystemCapacities", 
            "name": "costGrid.GridTransformerAvailableSystemCapacities", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "kilowatts list", 
            "x": 0.24994348125349489, 
            "y": 0.098312308513464577
        }, 
        {
            "alias": "og_pp_ini", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicPanelActualSystemCapacity;costOffGrid.PhotovoltaicPanelCostPerPhotovoltaicComponentKilowatt", 
            "dependencies": [
                "costOffGrid.PhotovoltaicPanelActualSystemCapacity", 
                "costOffGrid.PhotovoltaicPanelCostPerPhotovoltaicComponentKilowatt"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PhotovoltaicPanelCostPerPhotovoltaicComponentKilowatt) * self.get(PhotovoltaicPanelActualSystemCapacity))\n", 
            "id": "costOffGrid.PhotovoltaicPanelCost", 
            "name": "costOffGrid.PhotovoltaicPanelCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": -0.0026711306869395242, 
            "y": -0.093622162641680898
        }, 
        {
            "alias": "gr_tot_d", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    childDataset = childVS.state[0]\n    childNode = childVS.state[1]\n    if ((childVS.get(System)[0] == 'g') and (not childDataset.wasNodeAlreadyConnected(childNode))):\n        internalCost = childVS.get(costGrid.GridInternalSystemNodalDiscountedCost)\n        newConnections = childDataset.cycleConnections(childNode, is_existing=False)\n        newConnectionLengthHalved = (sum((x.weight for x in newConnections)) / 2.0)\n        externalCostPerMeter = childVS.get(costGrid.GridExternalSystemNodalDiscountedCostPerMeter)\n        externalCost = (externalCostPerMeter * newConnectionLengthHalved)\n        self.value += (internalCost + externalCost)\n", 
            "id": "GridSystemTotalDiscountedCost", 
            "name": "GridSystemTotalDiscountedCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.86192347010192849, 
            "y": 0.30812046952041239
        }, 
        {
            "alias": "ed_cc_pts", 
            "default": "50 0.1; 500 1; 5000 3; 10000 15", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.EducationFacilityCountCurvePoints", 
            "name": "demand.EducationFacilityCountCurvePoints", 
            "section": "demand", 
            "type": "CURVE_POINTS", 
            "units": "population and facility count list", 
            "x": -0.068425137315171691, 
            "y": 0.28292887934891131
        }, 
        {
            "alias": "pkel_hr", 
            "default": 1460, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.PeakElectricalHoursOfOperationPerYear", 
            "name": "demand.PeakElectricalHoursOfOperationPerYear", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "hours per year", 
            "x": -0.2613093839971477, 
            "y": -0.035825801872444787
        }, 
        {
            "alias": "ct_hh_t", 
            "default": "", 
            "dep_string": "demand.TargetHouseholdPenetrationRate;demographics.ProjectedHouseholdCount", 
            "dependencies": [
                "demand.TargetHouseholdPenetrationRate", 
                "demographics.ProjectedHouseholdCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return math.ceil((self.get(TargetHouseholdPenetrationRate) * self.get(demographics.ProjectedHouseholdCount)))\n", 
            "id": "demand.TargetHouseholdCount", 
            "name": "demand.TargetHouseholdCount", 
            "section": "demand", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "households", 
            "x": -0.03682279225265353, 
            "y": -0.0045957083416140751
        }, 
        {
            "alias": "gi_nod_lev", 
            "default": "", 
            "dep_string": "costGrid.GridInternalSystemNodalDiscountedCost;demand.ProjectedNodalDiscountedDemand", 
            "dependencies": [
                "costGrid.GridInternalSystemNodalDiscountedCost", 
                "demand.ProjectedNodalDiscountedDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(demand.ProjectedNodalDiscountedDemand) == 0):\n        return 0\n    return (self.get(GridInternalSystemNodalDiscountedCost) / float(self.get(demand.ProjectedNodalDiscountedDemand)))\n", 
            "id": "costGrid.GridInternalSystemNodalLevelizedCost", 
            "name": "costGrid.GridInternalSystemNodalLevelizedCost", 
            "section": "costGrid", 
            "type": "OTHER", 
            "units": "dollars per kilowatt-hour", 
            "x": 0.076242204904580044, 
            "y": 0.074862701239610696
        }, 
        {
            "alias": "li_dc_unit", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.PublicLightingFacilityUnitDemandPerPublicLightingFacilityPerYear", 
            "name": "demand.PublicLightingFacilityUnitDemandPerPublicLightingFacilityPerYear", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "kilowatt-hours per year", 
            "x": -0.15650001625260962, 
            "y": 0.0086380519144181826
        }, 
        {
            "alias": "pr_dc_unit", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.ProductiveUnitDemandPerHouseholdPerYear", 
            "name": "demand.ProductiveUnitDemandPerHouseholdPerYear", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "kilowatt-hours per year", 
            "x": -0.055080771540040117, 
            "y": -0.15951992311038934
        }, 
        {
            "alias": "di_ll_cm", 
            "default": 10, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costDistribution.LowVoltageLineCostPerMeter", 
            "name": "costDistribution.LowVoltageLineCostPerMeter", 
            "section": "costDistribution", 
            "type": "LEAF_VAR", 
            "units": "dollars per meter", 
            "x": 0.079674235559958659, 
            "y": 0.16917341410734033
        }, 
        {
            "alias": "p_co", 
            "default": "", 
            "dep_string": "demand.CommercialFacilityCountCurve;demographics.ProjectedPopulationCount", 
            "dependencies": [
                "demand.CommercialFacilityCountCurve", 
                "demographics.ProjectedPopulationCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return self.get(CommercialFacilityCountCurve).interpolate(self.get(demographics.ProjectedPopulationCount))\n", 
            "id": "demand.ProjectedCommercialFacilityCount", 
            "name": "demand.ProjectedCommercialFacilityCount", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "commercial facility count", 
            "x": -0.20769827169626265, 
            "y": -0.030550719369646897
        }, 
        {
            "alias": "ge_inim", 
            "default": "", 
            "dep_string": "costGrid.GridMediumVoltageLineCostPerMeter", 
            "dependencies": [
                "costGrid.GridMediumVoltageLineCostPerMeter"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return self.get(GridMediumVoltageLineCostPerMeter)\n", 
            "id": "costGrid.GridExternalSystemInitialCostPerMeter", 
            "name": "costGrid.GridExternalSystemInitialCostPerMeter", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per meter", 
            "x": 5.1084025449675225e-05, 
            "y": 0.33331651912441412
        }, 
        {
            "alias": "gr_tot_iic", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    childDataset = childVS.state[0]\n    childNode = childVS.state[1]\n    if ((childVS.get(System)[0] == 'g') and (not childDataset.wasNodeAlreadyConnected(childNode))):\n        internalCost = childVS.get(costGrid.GridInternalSystemInitialCost)\n        self.value += internalCost\n", 
            "id": "GridSystemTotalInternalInitialCost", 
            "name": "GridSystemTotalInternalInitialCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.52885270833934617, 
            "y": -0.64250861196406617
        }, 
        {
            "alias": "og_tot_ddc", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'o'):\n        self.value += childVS.get(costOffGrid.OffGridSystemNodalDiscountedDieselCost)\n", 
            "id": "OffGridSystemTotalDiscountedDieselCost", 
            "name": "OffGridSystemTotalDiscountedDieselCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": 0.86939518067867416, 
            "y": 0.54897182208660089
        }, 
        {
            "alias": "og_pp_rep", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicPanelCost;costOffGrid.PhotovoltaicPanelLifetime", 
            "dependencies": [
                "costOffGrid.PhotovoltaicPanelCost", 
                "costOffGrid.PhotovoltaicPanelLifetime"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PhotovoltaicPanelCost) / float(self.get(PhotovoltaicPanelLifetime)))\n", 
            "id": "costOffGrid.PhotovoltaicPanelReplacementCostPerYear", 
            "name": "costOffGrid.PhotovoltaicPanelReplacementCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.029275253903152474, 
            "y": -0.059188129401878918
        }, 
        {
            "alias": "di_ll_rep", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineInitialCost;costDistribution.LowVoltageLineLifetime", 
            "dependencies": [
                "costDistribution.LowVoltageLineInitialCost", 
                "costDistribution.LowVoltageLineLifetime"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(LowVoltageLineInitialCost) / float(self.get(LowVoltageLineLifetime)))\n", 
            "id": "costDistribution.LowVoltageLineReplacementCostPerYear", 
            "name": "costDistribution.LowVoltageLineReplacementCostPerYear", 
            "section": "costDistribution", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.062883074242463019, 
            "y": 0.14805088795054858
        }, 
        {
            "alias": "mg_tot_d", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'm'):\n        self.value += childVS.get(costMiniGrid.MiniGridSystemNodalDiscountedCost)\n", 
            "id": "MiniGridSystemTotalDiscountedCost", 
            "name": "MiniGridSystemTotalDiscountedCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.049728822202077479, 
            "y": 0.86373981580143089
        }, 
        {
            "alias": "mvmax", 
            "default": "", 
            "dep_string": "costGrid.GridExternalSystemNodalDiscountedCostPerMeter;costGrid.GridInternalSystemNodalDiscountedCost;costGrid.GridInternalSystemNodalLevelizedCost;costMiniGrid.MiniGridSystemNodalDiscountedCost;costMiniGrid.MiniGridSystemNodalLevelizedCost;costOffGrid.OffGridSystemNodalDiscountedCost;costOffGrid.OffGridSystemNodalLevelizedCost", 
            "dependencies": [
                "costGrid.GridExternalSystemNodalDiscountedCostPerMeter", 
                "costGrid.GridInternalSystemNodalDiscountedCost", 
                "costGrid.GridInternalSystemNodalLevelizedCost", 
                "costMiniGrid.MiniGridSystemNodalDiscountedCost", 
                "costMiniGrid.MiniGridSystemNodalLevelizedCost", 
                "costOffGrid.OffGridSystemNodalDiscountedCost", 
                "costOffGrid.OffGridSystemNodalLevelizedCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    self.get(costOffGrid.OffGridSystemNodalLevelizedCost)\n    self.get(costMiniGrid.MiniGridSystemNodalLevelizedCost)\n    self.get(costGrid.GridInternalSystemNodalLevelizedCost)\n    standaloneCost = min(self.get(costOffGrid.OffGridSystemNodalDiscountedCost), self.get(costMiniGrid.MiniGridSystemNodalDiscountedCost))\n    gridExternalBudget = max(0, (standaloneCost - self.get(costGrid.GridInternalSystemNodalDiscountedCost)))\n    return (gridExternalBudget / float(self.get(costGrid.GridExternalSystemNodalDiscountedCostPerMeter)))\n", 
            "id": "Metric", 
            "name": "Metric", 
            "section": "", 
            "type": "OTHER", 
            "units": "meters", 
            "x": 0.050657797548389893, 
            "y": 0.096977606472195055
        }, 
        {
            "alias": "p_dem_pr", 
            "default": "", 
            "dep_string": "demand.ProductiveDemandCurve;demand.ProductiveUnitDemandPerHouseholdPerYear;demand.TargetHouseholdCount;demographics.ProjectedPopulationCount;finance.ElectricityDemandMultiplier", 
            "dependencies": [
                "demand.ProductiveDemandCurve", 
                "demand.ProductiveUnitDemandPerHouseholdPerYear", 
                "demand.TargetHouseholdCount", 
                "demographics.ProjectedPopulationCount", 
                "finance.ElectricityDemandMultiplier"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(finance.ElectricityDemandMultiplier) * self.get(ProductiveDemandCurve).interpolate(self.get(demographics.ProjectedPopulationCount))) * self.get(ProductiveUnitDemandPerHouseholdPerYear)) * self.get(TargetHouseholdCount))\n", 
            "id": "demand.ProjectedProductiveDemandPerYear", 
            "name": "demand.ProjectedProductiveDemandPerYear", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "kilowatt-hours per year", 
            "x": -0.071119512707543964, 
            "y": -0.093636879516085791
        }, 
        {
            "alias": "gr_tr_life", 
            "default": 10, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridTransformerLifetime", 
            "name": "costGrid.GridTransformerLifetime", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": 0.29465861911442848, 
            "y": -0.11921429703656189
        }, 
        {
            "alias": "gr_loss", 
            "default": 0.15, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.DistributionLoss", 
            "name": "costGrid.DistributionLoss", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": 0.11544812340266325, 
            "y": 0.10912954063088331
        }, 
        {
            "alias": "mg_tot_drc", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'm'):\n        self.value += (childVS.get(costMiniGrid.MiniGridSystemRecurringCostPerYear) * childVS.get(finance.DiscountedCashFlowFactor))\n", 
            "id": "MiniGridSystemTotalDiscountedRecurringCost", 
            "name": "MiniGridSystemTotalDiscountedRecurringCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.050750744369897557, 
            "y": -1.034692948909214
        }, 
        {
            "alias": "gr_tr_acp", 
            "default": "", 
            "dep_string": "costGrid.GridTransformerActualSystemCapacityCounts;costGrid.GridTransformerAvailableSystemCapacities", 
            "dependencies": [
                "costGrid.GridTransformerActualSystemCapacityCounts", 
                "costGrid.GridTransformerAvailableSystemCapacities"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return numpy.dot(self.get(GridTransformerAvailableSystemCapacities), self.get(GridTransformerActualSystemCapacityCounts))\n", 
            "id": "costGrid.GridTransformerActualSystemCapacity", 
            "name": "costGrid.GridTransformerActualSystemCapacity", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "kilowatts", 
            "x": 0.24857949495421594, 
            "y": 0.059130902174860174
        }, 
        {
            "alias": "gr_tot_pnl", 
            "default": "", 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef compute(self):\n    return self.state[0].sumNetworkWeight(is_existing=False)\n", 
            "id": "GridSystemTotalProposedNetworkLength", 
            "name": "GridSystemTotalProposedNetworkLength", 
            "section": "", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "meters", 
            "x": 0.96100883608078214, 
            "y": 0.066763055826514192
        }, 
        {
            "alias": "li_cc", 
            "default": "", 
            "dep_string": "demand.PublicLightingFacilityCountCurvePoints;demand.PublicLightingFacilityCountCurveType", 
            "dependencies": [
                "demand.PublicLightingFacilityCountCurvePoints", 
                "demand.PublicLightingFacilityCountCurveType"
            ], 
            "fun_src": "\n\ndef compute(self):\n    curveType = self.get(PublicLightingFacilityCountCurveType)\n    curvePoints = self.get(PublicLightingFacilityCountCurvePoints)\n    return curve.fit(curveType, curvePoints)\n", 
            "id": "demand.PublicLightingFacilityCountCurve", 
            "name": "demand.PublicLightingFacilityCountCurve", 
            "section": "demand", 
            "type": "CURVE_FUN", 
            "units": "", 
            "x": -0.064772897776502775, 
            "y": 0.19100004603951284
        }, 
        {
            "alias": "og_dg_ck", 
            "default": 150, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.DieselGeneratorCostPerDieselSystemKilowatt", 
            "name": "costOffGrid.DieselGeneratorCostPerDieselSystemKilowatt", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per kilowatt", 
            "x": -0.075451051111719417, 
            "y": -0.37242660693595625
        }, 
        {
            "alias": "mg_g_om", 
            "default": "", 
            "dep_string": "costMiniGrid.GenerationCost;costMiniGrid.GenerationOperationsAndMaintenanceCostPerYearAsFractionOfGenerationCost", 
            "dependencies": [
                "costMiniGrid.GenerationCost", 
                "costMiniGrid.GenerationOperationsAndMaintenanceCostPerYearAsFractionOfGenerationCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GenerationOperationsAndMaintenanceCostPerYearAsFractionOfGenerationCost) * self.get(GenerationCost))\n", 
            "id": "costMiniGrid.GenerationOperationsAndMaintenanceCostPerYear", 
            "name": "costMiniGrid.GenerationOperationsAndMaintenanceCostPerYear", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.2803764772474992, 
            "y": 0.1383065845952002
        }, 
        {
            "alias": "p_ho", 
            "default": "", 
            "dep_string": "demographics.MeanHouseholdSize;demographics.ProjectedPopulationCount", 
            "dependencies": [
                "demographics.MeanHouseholdSize", 
                "demographics.ProjectedPopulationCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return math.ceil((self.get(ProjectedPopulationCount) / float(self.get(MeanHouseholdSize))))\n", 
            "id": "demographics.ProjectedHouseholdCount", 
            "name": "demographics.ProjectedHouseholdCount", 
            "section": "demographics", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "households", 
            "x": -0.16962123776333854, 
            "y": -0.0042453808652137461
        }, 
        {
            "alias": "gr_tr_dcp", 
            "default": "", 
            "dep_string": "costGrid.DistributionLoss;demand.ProjectedPeakNodalDemand", 
            "dependencies": [
                "costGrid.DistributionLoss", 
                "demand.ProjectedPeakNodalDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(demand.ProjectedPeakNodalDemand) / float((1 - self.get(DistributionLoss))))\n", 
            "id": "costGrid.GridTransformerDesiredSystemCapacity", 
            "name": "costGrid.GridTransformerDesiredSystemCapacity", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "kilowatts", 
            "x": 0.06805486345444102, 
            "y": 0.076640581690982215
        }, 
        {
            "alias": "p_pop", 
            "default": "", 
            "dep_string": "demographics.ProjectedPopulationCounts", 
            "dependencies": [
                "demographics.ProjectedPopulationCounts"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return self.get(ProjectedPopulationCounts)[(-1)]\n", 
            "id": "demographics.ProjectedPopulationCount", 
            "name": "demographics.ProjectedPopulationCount", 
            "section": "demographics", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "person count", 
            "x": -0.1417222750771775, 
            "y": -0.010832996888463991
        }, 
        {
            "alias": "og_ct", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'o'):\n        self.value += 1\n", 
            "id": "OffGridSystemTotal", 
            "name": "OffGridSystemTotal", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "count", 
            "x": -0.0087110933789942072, 
            "y": 0.95528093905371358
        }, 
        {
            "alias": "he_dc_unit", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.HealthFacilityUnitDemandPerHealthFacilityPerYear", 
            "name": "demand.HealthFacilityUnitDemandPerHealthFacilityPerYear", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "kilowatt-hours per year", 
            "x": -0.14020587835787587, 
            "y": -0.10608511503761293
        }, 
        {
            "alias": "og_dg_cps", 
            "default": "1000 750 500 400 200 150 100 70 32 19 12 10 8 6", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.DieselGeneratorAvailableSystemCapacities", 
            "name": "costOffGrid.DieselGeneratorAvailableSystemCapacities", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "kilowatts list", 
            "x": -0.18166091559600039, 
            "y": -0.29615627046803406
        }, 
        {
            "alias": "mg_tot_i", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'm'):\n        self.value += childVS.get(costMiniGrid.MiniGridSystemInitialCost)\n", 
            "id": "MiniGridSystemTotalInitialCost", 
            "name": "MiniGridSystemTotalInitialCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.41487547522626295, 
            "y": -0.86185420196070661
        }, 
        {
            "alias": "mg_le_om", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYearAsFractionOfEquipmentCost;costMiniGrid.LowVoltageLineEquipmentCost", 
            "dependencies": [
                "costDistribution.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYearAsFractionOfEquipmentCost", 
                "costMiniGrid.LowVoltageLineEquipmentCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(costDistribution.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYearAsFractionOfEquipmentCost) * self.get(LowVoltageLineEquipmentCost))\n", 
            "id": "costMiniGrid.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear", 
            "name": "costMiniGrid.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.1859832318228902, 
            "y": 0.032065276540604128
        }, 
        {
            "alias": "mg_g_dcp", 
            "default": "", 
            "dep_string": "costMiniGrid.DistributionLoss;costMiniGrid.GenerationCapacityFactor;costMiniGrid.UtilizationFactor;demand.ProjectedNodalDemandPerYear", 
            "dependencies": [
                "costMiniGrid.DistributionLoss", 
                "costMiniGrid.GenerationCapacityFactor", 
                "costMiniGrid.UtilizationFactor", 
                "demand.ProjectedNodalDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    effectiveDemandPerYear = (self.get(demand.ProjectedNodalDemandPerYear) / float((1 - self.get(DistributionLoss))))\n    GenerationHoursOfOperationPerYear = (365 * 24)\n    return (((effectiveDemandPerYear / float(self.get(GenerationCapacityFactor))) / float(self.get(UtilizationFactor))) / GenerationHoursOfOperationPerYear)\n", 
            "id": "costMiniGrid.GenerationDesiredSystemCapacity", 
            "name": "costMiniGrid.GenerationDesiredSystemCapacity", 
            "section": "costMiniGrid", 
            "type": "OTHER", 
            "units": "kilowatts", 
            "x": 0.19308621699906586, 
            "y": 0.0085925923843903386
        }, 
        {
            "alias": "g_ct", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'g'):\n        self.value += 1\n", 
            "id": "GridSystemTotal", 
            "name": "GridSystemTotal", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "count", 
            "x": 0.95436542044926964, 
            "y": 0.38726049944316843
        }, 
        {
            "alias": "gr_el", 
            "default": "", 
            "dep_string": "costGrid.DistributionLoss;costGrid.GridElectricityCostPerKilowattHour;demand.ProjectedNodalDemandPerYear", 
            "dependencies": [
                "costGrid.DistributionLoss", 
                "costGrid.GridElectricityCostPerKilowattHour", 
                "demand.ProjectedNodalDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return ((self.get(GridElectricityCostPerKilowattHour) * self.get(demand.ProjectedNodalDemandPerYear)) / float((1 - self.get(DistributionLoss))))\n", 
            "id": "costGrid.GridElectricityCostPerYear", 
            "name": "costGrid.GridElectricityCostPerYear", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.11311264152232765, 
            "y": 0.046913908954988641
        }, 
        {
            "alias": "og_dg_acp", 
            "default": "", 
            "dep_string": "costOffGrid.DieselGeneratorActualSystemCapacityCounts;costOffGrid.DieselGeneratorAvailableSystemCapacities", 
            "dependencies": [
                "costOffGrid.DieselGeneratorActualSystemCapacityCounts", 
                "costOffGrid.DieselGeneratorAvailableSystemCapacities"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return numpy.dot(self.get(DieselGeneratorAvailableSystemCapacities), self.get(DieselGeneratorActualSystemCapacityCounts))\n", 
            "id": "costOffGrid.DieselGeneratorActualSystemCapacity", 
            "name": "costOffGrid.DieselGeneratorActualSystemCapacity", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "kilowatts", 
            "x": -0.12985302941070501, 
            "y": -0.25155863111669291
        }, 
        {
            "alias": "mg_tot_desc", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'm'):\n        self.value += childVS.get(costMiniGrid.MiniGridSystemNodalDiscountedEnergyStorageCost)\n", 
            "id": "MiniGridSystemTotalDiscountedEnergyStorageCost", 
            "name": "MiniGridSystemTotalDiscountedEnergyStorageCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.71260212098641096, 
            "y": -0.71247397396884604
        }, 
        {
            "alias": "p_ed", 
            "default": "", 
            "dep_string": "demand.EducationFacilityCountCurve;demographics.ProjectedPopulationCount", 
            "dependencies": [
                "demand.EducationFacilityCountCurve", 
                "demographics.ProjectedPopulationCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return self.get(EducationFacilityCountCurve).interpolate(self.get(demographics.ProjectedPopulationCount))\n", 
            "id": "demand.ProjectedEducationFacilityCount", 
            "name": "demand.ProjectedEducationFacilityCount", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "education facility count", 
            "x": -0.11296028504723661, 
            "y": 0.078404922926589612
        }, 
        {
            "alias": "gr_tot_lev", 
            "default": "", 
            "dep_string": "GridSystemTotalDiscountedCost;GridSystemTotalDiscountedDemand", 
            "dependencies": [
                "GridSystemTotalDiscountedCost", 
                "GridSystemTotalDiscountedDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(GridSystemTotalDiscountedDemand) == 0):\n        return 0\n    return (self.get(GridSystemTotalDiscountedCost) / float(self.get(GridSystemTotalDiscountedDemand)))\n", 
            "id": "GridSystemTotalLevelizedCost", 
            "name": "GridSystemTotalLevelizedCost", 
            "section": "", 
            "type": "OTHER", 
            "units": "dollars per kilowatt-hour", 
            "x": -0.82885298756673775, 
            "y": 0.29539333792071543
        }, 
        {
            "alias": "gr_tr", 
            "default": "", 
            "dep_string": "costGrid.GridTransformerActualSystemCapacity;costGrid.GridTransformerCostPerGridSystemKilowatt", 
            "dependencies": [
                "costGrid.GridTransformerActualSystemCapacity", 
                "costGrid.GridTransformerCostPerGridSystemKilowatt"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridTransformerCostPerGridSystemKilowatt) * self.get(GridTransformerActualSystemCapacity))\n", 
            "id": "costGrid.GridTransformerCost", 
            "name": "costGrid.GridTransformerCost", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.24626888044314324, 
            "y": -0.013558657502695059
        }, 
        {
            "alias": "og_dg_i", 
            "default": "", 
            "dep_string": "costOffGrid.DieselGeneratorCost;costOffGrid.DieselGeneratorInstallationCostAsFractionOfGeneratorCost", 
            "dependencies": [
                "costOffGrid.DieselGeneratorCost", 
                "costOffGrid.DieselGeneratorInstallationCostAsFractionOfGeneratorCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(DieselGeneratorInstallationCostAsFractionOfGeneratorCost) * self.get(DieselGeneratorCost))\n", 
            "id": "costOffGrid.DieselGeneratorInstallationCost", 
            "name": "costOffGrid.DieselGeneratorInstallationCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": -0.061112319213438931, 
            "y": -0.31371116000533067
        }, 
        {
            "alias": "pop_g_u", 
            "default": 0.036, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demographics.UrbanPopulationGrowthRatePerYear", 
            "name": "demographics.UrbanPopulationGrowthRatePerYear", 
            "section": "demographics", 
            "type": "LEAF_VAR", 
            "units": "fraction per year", 
            "x": -0.27432387895998744, 
            "y": 0.12151834108916923
        }, 
        {
            "alias": "gr_tr_rep", 
            "default": "", 
            "dep_string": "costGrid.GridTransformerCost;costGrid.GridTransformerLifetime", 
            "dependencies": [
                "costGrid.GridTransformerCost", 
                "costGrid.GridTransformerLifetime"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridTransformerCost) / float(self.get(GridTransformerLifetime)))\n", 
            "id": "costGrid.GridTransformerReplacementCostPerYear", 
            "name": "costGrid.GridTransformerReplacementCostPerYear", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.24718157115297981, 
            "y": -0.060730530648609608
        }, 
        {
            "alias": "mg_rec_gcpy", 
            "default": "", 
            "dep_string": "costMiniGrid.EnergyStorageCostPerYear;costMiniGrid.GenerationOperationsAndMaintenanceCostPerYear;costMiniGrid.GenerationReplacementCostPerYear", 
            "dependencies": [
                "costMiniGrid.EnergyStorageCostPerYear", 
                "costMiniGrid.GenerationOperationsAndMaintenanceCostPerYear", 
                "costMiniGrid.GenerationReplacementCostPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(GenerationOperationsAndMaintenanceCostPerYear), self.get(GenerationReplacementCostPerYear), self.get(EnergyStorageCostPerYear)])\n", 
            "id": "costMiniGrid.MiniGridSystemRecurringGenerationCostPerYear", 
            "name": "costMiniGrid.MiniGridSystemRecurringGenerationCostPerYear", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.22717473374320052, 
            "y": 0.14515498350503556
        }, 
        {
            "alias": "ho_size", 
            "default": "", 
            "dep_string": "demographics.IsRural;demographics.RuralMeanHouseholdSize;demographics.UrbanMeanHouseholdSize", 
            "dependencies": [
                "demographics.IsRural", 
                "demographics.RuralMeanHouseholdSize", 
                "demographics.UrbanMeanHouseholdSize"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(RuralMeanHouseholdSize) if self.get(IsRural) else self.get(UrbanMeanHouseholdSize))\n", 
            "id": "demographics.MeanHouseholdSize", 
            "name": "demographics.MeanHouseholdSize", 
            "section": "demographics", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "person count", 
            "x": -0.28759837501463209, 
            "y": -0.011910703908270918
        }, 
        {
            "alias": "gr_le", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineEquipmentCostPerConnection;costGrid.GridInternalConnectionCount", 
            "dependencies": [
                "costDistribution.LowVoltageLineEquipmentCostPerConnection", 
                "costGrid.GridInternalConnectionCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(costDistribution.LowVoltageLineEquipmentCostPerConnection) * self.get(GridInternalConnectionCount))\n", 
            "id": "costGrid.LowVoltageLineEquipmentCost", 
            "name": "costGrid.LowVoltageLineEquipmentCost", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.11631807312634773, 
            "y": -0.034881322394632173
        }, 
        {
            "alias": "ho_dc_t", 
            "default": "ZeroLogisticLinear", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.HouseholdDemandCurveType", 
            "name": "demand.HouseholdDemandCurveType", 
            "section": "demand", 
            "type": "CURVE_TYPE", 
            "units": "", 
            "x": 0.0042667297567948086, 
            "y": -0.29478444425262429
        }, 
        {
            "alias": "og_pb_rep", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicBatteryCost;costOffGrid.PhotovoltaicBatteryLifetime", 
            "dependencies": [
                "costOffGrid.PhotovoltaicBatteryCost", 
                "costOffGrid.PhotovoltaicBatteryLifetime"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PhotovoltaicBatteryCost) / float(self.get(PhotovoltaicBatteryLifetime)))\n", 
            "id": "costOffGrid.PhotovoltaicBatteryReplacementCostPerYear", 
            "name": "costOffGrid.PhotovoltaicBatteryReplacementCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.12209206551891966, 
            "y": -0.19781327434251156
        }, 
        {
            "alias": "ho_size_r", 
            "default": 9.6, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demographics.RuralMeanHouseholdSize", 
            "name": "demographics.RuralMeanHouseholdSize", 
            "section": "demographics", 
            "type": "LEAF_VAR", 
            "units": "person count", 
            "x": -0.36272951858107133, 
            "y": -0.010674652334194243
        }, 
        {
            "alias": "li_cc_t", 
            "default": "ZeroLogisticLinear", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.PublicLightingFacilityCountCurveType", 
            "name": "demand.PublicLightingFacilityCountCurveType", 
            "section": "demand", 
            "type": "CURVE_TYPE", 
            "units": "", 
            "x": -0.049451191005150004, 
            "y": 0.26242121048415984
        }, 
        {
            "alias": "mg_nod_d", 
            "default": "", 
            "dep_string": "costMiniGrid.MiniGridSystemInitialCost;costMiniGrid.MiniGridSystemRecurringCostPerYear;demand.ProjectedNodalDemandPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "costMiniGrid.MiniGridSystemInitialCost", 
                "costMiniGrid.MiniGridSystemRecurringCostPerYear", 
                "demand.ProjectedNodalDemandPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(demand.ProjectedNodalDemandPerYear) == 0):\n        return 0\n    return (self.get(MiniGridSystemInitialCost) + (self.get(MiniGridSystemRecurringCostPerYear) * self.get(finance.DiscountedCashFlowFactor)))\n", 
            "id": "costMiniGrid.MiniGridSystemNodalDiscountedCost", 
            "name": "costMiniGrid.MiniGridSystemNodalDiscountedCost", 
            "section": "costMiniGrid", 
            "type": "OTHER", 
            "units": "dollars", 
            "x": 0.094605937291293268, 
            "y": 0.068651887733048436
        }, 
        {
            "alias": "og_px_ini", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicBalanceCostAsFractionOfPanelCost;costOffGrid.PhotovoltaicPanelCost", 
            "dependencies": [
                "costOffGrid.PhotovoltaicBalanceCostAsFractionOfPanelCost", 
                "costOffGrid.PhotovoltaicPanelCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PhotovoltaicBalanceCostAsFractionOfPanelCost) * self.get(PhotovoltaicPanelCost))\n", 
            "id": "costOffGrid.PhotovoltaicBalanceCost", 
            "name": "costOffGrid.PhotovoltaicBalanceCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": -0.028858245621011108, 
            "y": -0.068588227156413203
        }, 
        {
            "alias": "p_dem_li", 
            "default": "", 
            "dep_string": "demand.ProjectedPublicLightingFacilityCount;demand.PublicLightingFacilityUnitDemandPerPublicLightingFacilityPerYear;demand.SocialInfrastructureDemandCurve;demographics.ProjectedPopulationCount;finance.ElectricityDemandMultiplier", 
            "dependencies": [
                "demand.ProjectedPublicLightingFacilityCount", 
                "demand.PublicLightingFacilityUnitDemandPerPublicLightingFacilityPerYear", 
                "demand.SocialInfrastructureDemandCurve", 
                "demographics.ProjectedPopulationCount", 
                "finance.ElectricityDemandMultiplier"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(finance.ElectricityDemandMultiplier) * self.get(SocialInfrastructureDemandCurve).interpolate(self.get(demographics.ProjectedPopulationCount))) * self.get(PublicLightingFacilityUnitDemandPerPublicLightingFacilityPerYear)) * self.get(ProjectedPublicLightingFacilityCount))\n", 
            "id": "demand.ProjectedPublicLightingFacilityDemandPerYear", 
            "name": "demand.ProjectedPublicLightingFacilityDemandPerYear", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "kilowatt-hours per year", 
            "x": -0.099694649090116466, 
            "y": -0.016082781414675049
        }, 
        {
            "alias": "interest_g", 
            "default": 0.1, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "finance.InterestRatePerYear", 
            "name": "finance.InterestRatePerYear", 
            "section": "finance", 
            "type": "LEAF_VAR", 
            "units": "fraction per year", 
            "x": -0.0030359475382611464, 
            "y": 0.13487566597310513
        }, 
        {
            "alias": "gr_el_ckwh", 
            "default": 0.17, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridElectricityCostPerKilowattHour", 
            "name": "costGrid.GridElectricityCostPerKilowattHour", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per kilowatt-hour", 
            "x": 0.15366215727443788, 
            "y": 0.10803726601931547
        }, 
        {
            "alias": "og_tot_ddfc", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'o'):\n        self.value += childVS.get(costOffGrid.OffGridSystemNodalDiscountedDieselFuelCost)\n", 
            "id": "OffGridSystemTotalDiscountedDieselFuelCost", 
            "name": "OffGridSystemTotalDiscountedDieselFuelCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": 1.0, 
            "y": -0.08954529950386611
        }, 
        {
            "alias": "mg_rec", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineRecurringCostPerYear;costMiniGrid.EnergyStorageCostPerYear;costMiniGrid.GenerationOperationsAndMaintenanceCostPerYear;costMiniGrid.GenerationReplacementCostPerYear;costMiniGrid.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear", 
            "dependencies": [
                "costDistribution.LowVoltageLineRecurringCostPerYear", 
                "costMiniGrid.EnergyStorageCostPerYear", 
                "costMiniGrid.GenerationOperationsAndMaintenanceCostPerYear", 
                "costMiniGrid.GenerationReplacementCostPerYear", 
                "costMiniGrid.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(GenerationOperationsAndMaintenanceCostPerYear), self.get(GenerationReplacementCostPerYear), self.get(EnergyStorageCostPerYear), self.get(LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear), self.get(costDistribution.LowVoltageLineRecurringCostPerYear)])\n", 
            "id": "costMiniGrid.MiniGridSystemRecurringCostPerYear", 
            "name": "costMiniGrid.MiniGridSystemRecurringCostPerYear", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": 0.1994600583664129, 
            "y": 0.09866634008441369
        }, 
        {
            "alias": "ho_dc_unit", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.HouseholdUnitDemandPerHouseholdPerYear", 
            "name": "demand.HouseholdUnitDemandPerHouseholdPerYear", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "kilowatt-hours per year", 
            "x": -0.092970293598421835, 
            "y": -0.15170212506790287
        }, 
        {
            "alias": "gr_i", 
            "default": "", 
            "dep_string": "costGrid.GridInstallationCostPerConnection;costGrid.GridInternalConnectionCount", 
            "dependencies": [
                "costGrid.GridInstallationCostPerConnection", 
                "costGrid.GridInternalConnectionCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridInstallationCostPerConnection) * self.get(GridInternalConnectionCount))\n", 
            "id": "costGrid.GridInstallationCost", 
            "name": "costGrid.GridInstallationCost", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.11323505635722644, 
            "y": -0.063375188235203328
        }, 
        {
            "alias": "mg_g_acps", 
            "default": "", 
            "dep_string": "costMiniGrid.GenerationAvailableSystemCapacities;costMiniGrid.GenerationDesiredSystemCapacity", 
            "dependencies": [
                "costMiniGrid.GenerationAvailableSystemCapacities", 
                "costMiniGrid.GenerationDesiredSystemCapacity"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return metric.computeSystemCounts(self.get(GenerationDesiredSystemCapacity), self.get(GenerationAvailableSystemCapacities))\n", 
            "id": "costMiniGrid.GenerationActualSystemCapacityCounts", 
            "name": "costMiniGrid.GenerationActualSystemCapacityCounts", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "capacity count list", 
            "x": 0.30358949994909379, 
            "y": 0.054685041572726772
        }, 
        {
            "alias": "og_fl_lkwh", 
            "default": 0.5, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.DieselFuelLitersConsumedPerKilowattHour", 
            "name": "costOffGrid.DieselFuelLitersConsumedPerKilowattHour", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "liters per kilowatt-hour", 
            "x": -0.10779527413854245, 
            "y": -0.26510288519189229
        }, 
        {
            "alias": "p_dem", 
            "default": "", 
            "dep_string": "demand.ProjectedCommercialFacilityDemandPerYear;demand.ProjectedEducationFacilityDemandPerYear;demand.ProjectedHealthFacilityDemandPerYear;demand.ProjectedHouseholdDemandPerYear;demand.ProjectedProductiveDemandPerYear;demand.ProjectedPublicLightingFacilityDemandPerYear", 
            "dependencies": [
                "demand.ProjectedCommercialFacilityDemandPerYear", 
                "demand.ProjectedEducationFacilityDemandPerYear", 
                "demand.ProjectedHealthFacilityDemandPerYear", 
                "demand.ProjectedHouseholdDemandPerYear", 
                "demand.ProjectedProductiveDemandPerYear", 
                "demand.ProjectedPublicLightingFacilityDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(ProjectedHouseholdDemandPerYear), self.get(ProjectedProductiveDemandPerYear), self.get(ProjectedHealthFacilityDemandPerYear), self.get(ProjectedEducationFacilityDemandPerYear), self.get(ProjectedCommercialFacilityDemandPerYear), self.get(ProjectedPublicLightingFacilityDemandPerYear)])\n", 
            "id": "demand.ProjectedNodalDemandPerYear", 
            "name": "demand.ProjectedNodalDemandPerYear", 
            "section": "demand", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "kilowatt-hours per year", 
            "x": 0.013732515893461585, 
            "y": -0.0095089123129470567
        }, 
        {
            "alias": "p_dem_he", 
            "default": "", 
            "dep_string": "demand.HealthFacilityUnitDemandPerHealthFacilityPerYear;demand.ProjectedHealthFacilityCount;demand.SocialInfrastructureDemandCurve;demographics.ProjectedPopulationCount;finance.ElectricityDemandMultiplier", 
            "dependencies": [
                "demand.HealthFacilityUnitDemandPerHealthFacilityPerYear", 
                "demand.ProjectedHealthFacilityCount", 
                "demand.SocialInfrastructureDemandCurve", 
                "demographics.ProjectedPopulationCount", 
                "finance.ElectricityDemandMultiplier"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(finance.ElectricityDemandMultiplier) * self.get(SocialInfrastructureDemandCurve).interpolate(self.get(demographics.ProjectedPopulationCount))) * self.get(HealthFacilityUnitDemandPerHealthFacilityPerYear)) * self.get(ProjectedHealthFacilityCount))\n", 
            "id": "demand.ProjectedHealthFacilityDemandPerYear", 
            "name": "demand.ProjectedHealthFacilityDemandPerYear", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "kilowatt-hours per year", 
            "x": -0.10392650667846408, 
            "y": -0.052390594981783278
        }, 
        {
            "alias": "og_ini", 
            "default": "", 
            "dep_string": "costOffGrid.DieselComponentInitialCost;costOffGrid.PhotovoltaicComponentInitialCost", 
            "dependencies": [
                "costOffGrid.DieselComponentInitialCost", 
                "costOffGrid.PhotovoltaicComponentInitialCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PhotovoltaicComponentInitialCost) + self.get(DieselComponentInitialCost))\n", 
            "id": "costOffGrid.OffGridSystemInitialCost", 
            "name": "costOffGrid.OffGridSystemInitialCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.015085566945541936, 
            "y": -0.11870410476904904
        }, 
        {
            "alias": "og_dg_om", 
            "default": "", 
            "dep_string": "costOffGrid.DieselGeneratorCost;costOffGrid.DieselGeneratorOperationsAndMaintenanceCostPerYearAsFractionOfGeneratorCost", 
            "dependencies": [
                "costOffGrid.DieselGeneratorCost", 
                "costOffGrid.DieselGeneratorOperationsAndMaintenanceCostPerYearAsFractionOfGeneratorCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(DieselGeneratorOperationsAndMaintenanceCostPerYearAsFractionOfGeneratorCost) * self.get(DieselGeneratorCost))\n", 
            "id": "costOffGrid.DieselGeneratorOperationsAndMaintenanceCostPerYear", 
            "name": "costOffGrid.DieselGeneratorOperationsAndMaintenanceCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": -0.027851666342858041, 
            "y": -0.31921045547318305
        }, 
        {
            "alias": "gr_tr_omf", 
            "default": 0.03, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridTransformerOperationsAndMaintenanceCostPerYearAsFractionOfTransformerCost", 
            "name": "costGrid.GridTransformerOperationsAndMaintenanceCostPerYearAsFractionOfTransformerCost", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": 0.33367077824250146, 
            "y": -0.080472520091498773
        }, 
        {
            "alias": "mid", 
            "default": 25, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demographics.MeanInterhouseholdDistance", 
            "name": "demographics.MeanInterhouseholdDistance", 
            "section": "demographics", 
            "type": "LEAF_VAR", 
            "units": "meters", 
            "x": -0.041976505518005837, 
            "y": 0.14307611131940817
        }, 
        {
            "alias": "u_pop_thre", 
            "default": 5000, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demographics.UrbanPopulationThreshold", 
            "name": "demographics.UrbanPopulationThreshold", 
            "section": "demographics", 
            "type": "LEAF_VAR", 
            "units": "person count", 
            "x": -0.26378033682007346, 
            "y": 0.070041782755444301
        }, 
        {
            "alias": "gr_le_om", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYearAsFractionOfEquipmentCost;costGrid.LowVoltageLineEquipmentCost", 
            "dependencies": [
                "costDistribution.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYearAsFractionOfEquipmentCost", 
                "costGrid.LowVoltageLineEquipmentCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(costDistribution.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYearAsFractionOfEquipmentCost) * self.get(LowVoltageLineEquipmentCost))\n", 
            "id": "costGrid.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear", 
            "name": "costGrid.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYear", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.18658839233273886, 
            "y": -0.039131578791702142
        }, 
        {
            "alias": "di_le_cc", 
            "default": 200, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costDistribution.LowVoltageLineEquipmentCostPerConnection", 
            "name": "costDistribution.LowVoltageLineEquipmentCostPerConnection", 
            "section": "costDistribution", 
            "type": "LEAF_VAR", 
            "units": "dollars per connection", 
            "x": 0.14177345172674988, 
            "y": -0.019980852772222321
        }, 
        {
            "alias": "og_d_rec", 
            "default": "", 
            "dep_string": "costOffGrid.DieselFuelCostPerYear;costOffGrid.DieselGeneratorOperationsAndMaintenanceCostPerYear;costOffGrid.DieselGeneratorReplacementCostPerYear", 
            "dependencies": [
                "costOffGrid.DieselFuelCostPerYear", 
                "costOffGrid.DieselGeneratorOperationsAndMaintenanceCostPerYear", 
                "costOffGrid.DieselGeneratorReplacementCostPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(DieselGeneratorOperationsAndMaintenanceCostPerYear), self.get(DieselGeneratorReplacementCostPerYear), self.get(DieselFuelCostPerYear)])\n", 
            "id": "costOffGrid.DieselComponentRecurringCostPerYear", 
            "name": "costOffGrid.DieselComponentRecurringCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": -0.0077563544288604775, 
            "y": -0.21439349889195453
        }, 
        {
            "alias": "mg_mnesc", 
            "default": 24, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.MinimumEnergyStorageCapacity", 
            "name": "costMiniGrid.MinimumEnergyStorageCapacity", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "kilowatt-hours per day", 
            "x": 0.23853730525022476, 
            "y": 0.041454505599935153
        }, 
        {
            "alias": "og_pb_ini", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicBatteryCostPerKilowattHour;costOffGrid.PhotovoltaicBatteryKilowattHoursPerPhotovoltaicComponentKilowatt;costOffGrid.PhotovoltaicPanelActualSystemCapacity", 
            "dependencies": [
                "costOffGrid.PhotovoltaicBatteryCostPerKilowattHour", 
                "costOffGrid.PhotovoltaicBatteryKilowattHoursPerPhotovoltaicComponentKilowatt", 
                "costOffGrid.PhotovoltaicPanelActualSystemCapacity"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return ((self.get(PhotovoltaicBatteryCostPerKilowattHour) * self.get(PhotovoltaicBatteryKilowattHoursPerPhotovoltaicComponentKilowatt)) * self.get(PhotovoltaicPanelActualSystemCapacity))\n", 
            "id": "costOffGrid.PhotovoltaicBatteryCost", 
            "name": "costOffGrid.PhotovoltaicBatteryCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.088785304088332281, 
            "y": -0.16820123229419967
        }, 
        {
            "alias": "og_d_ini", 
            "default": "", 
            "dep_string": "costOffGrid.DieselGeneratorCost;costOffGrid.DieselGeneratorInstallationCost", 
            "dependencies": [
                "costOffGrid.DieselGeneratorCost", 
                "costOffGrid.DieselGeneratorInstallationCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(DieselGeneratorCost), self.get(DieselGeneratorInstallationCost)])\n", 
            "id": "costOffGrid.DieselComponentInitialCost", 
            "name": "costOffGrid.DieselComponentInitialCost", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars", 
            "x": -0.024370322761206833, 
            "y": -0.21022960317219497
        }, 
        {
            "alias": "mg_nod_dgc", 
            "default": "", 
            "dep_string": "costMiniGrid.MiniGridSystemInitialGenerationCost;costMiniGrid.MiniGridSystemRecurringGenerationCostPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "costMiniGrid.MiniGridSystemInitialGenerationCost", 
                "costMiniGrid.MiniGridSystemRecurringGenerationCostPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(MiniGridSystemInitialGenerationCost) + (self.get(MiniGridSystemRecurringGenerationCostPerYear) * self.get(finance.DiscountedCashFlowFactor)))\n", 
            "id": "costMiniGrid.MiniGridSystemNodalDiscountedGenerationCost", 
            "name": "costMiniGrid.MiniGridSystemNodalDiscountedGenerationCost", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.13869527767441736, 
            "y": 0.13907945424071011
        }, 
        {
            "alias": "mg_tot_lev", 
            "default": "", 
            "dep_string": "MiniGridSystemTotalDiscountedCost;MiniGridSystemTotalDiscountedDemand", 
            "dependencies": [
                "MiniGridSystemTotalDiscountedCost", 
                "MiniGridSystemTotalDiscountedDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(MiniGridSystemTotalDiscountedDemand) == 0):\n        return 0\n    return (self.get(MiniGridSystemTotalDiscountedCost) / float(self.get(MiniGridSystemTotalDiscountedDemand)))\n", 
            "id": "MiniGridSystemTotalLevelizedCost", 
            "name": "MiniGridSystemTotalLevelizedCost", 
            "section": "", 
            "type": "OTHER", 
            "units": "dollars per kilowatt-hour", 
            "x": -0.021641742022124842, 
            "y": 0.86227566292228019
        }, 
        {
            "alias": "og_pp_ckw", 
            "default": 6000, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicPanelCostPerPhotovoltaicComponentKilowatt", 
            "name": "costOffGrid.PhotovoltaicPanelCostPerPhotovoltaicComponentKilowatt", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per kilowatt", 
            "x": -0.037758772610327694, 
            "y": -0.037937240185584926
        }, 
        {
            "alias": "di_ll_len", 
            "default": "", 
            "dep_string": "demand.TargetHouseholdCount;demographics.MeanInterhouseholdDistance", 
            "dependencies": [
                "demand.TargetHouseholdCount", 
                "demographics.MeanInterhouseholdDistance"
            ], 
            "fun_src": "\n\ndef compute(self):\n    meanInterhouseholdDistance = self.get(demographics.MeanInterhouseholdDistance)\n    targetHouseholdCount = self.get(demand.TargetHouseholdCount)\n    return ((meanInterhouseholdDistance * (targetHouseholdCount - 1)) if (targetHouseholdCount > 1) else 0)\n", 
            "id": "costDistribution.LowVoltageLineLength", 
            "name": "costDistribution.LowVoltageLineLength", 
            "section": "costDistribution", 
            "type": "OTHER", 
            "units": "meters", 
            "x": 0.0070589506827683059, 
            "y": 0.095071757728049058
        }, 
        {
            "alias": "og_dg_life", 
            "default": 5, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.DieselGeneratorLifetime", 
            "name": "costOffGrid.DieselGeneratorLifetime", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": 0.00067931533262580645, 
            "y": -0.39378663743811188
        }, 
        {
            "alias": "mg_g_if", 
            "default": 0.25, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.GenerationInstallationCostAsFractionOfGenerationCost", 
            "name": "costMiniGrid.GenerationInstallationCostAsFractionOfGenerationCost", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": 0.29589138176822583, 
            "y": 0.23108121252922775
        }, 
        {
            "alias": "di_le_omf", 
            "default": 0.01, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costDistribution.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYearAsFractionOfEquipmentCost", 
            "name": "costDistribution.LowVoltageLineEquipmentOperationsAndMaintenanceCostPerYearAsFractionOfEquipmentCost", 
            "section": "costDistribution", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": 0.22515427835141744, 
            "y": -0.021858943044582541
        }, 
        {
            "alias": "og_fl_cl", 
            "default": 1.08, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.DieselFuelCostPerLiter", 
            "name": "costOffGrid.DieselFuelCostPerLiter", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per liter", 
            "x": -0.090347296490069978, 
            "y": -0.26812557993123798
        }, 
        {
            "alias": "og_pp_life", 
            "default": 30, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicPanelLifetime", 
            "name": "costOffGrid.PhotovoltaicPanelLifetime", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": 0.0045334504780046398, 
            "y": 0.0094383118192383833
        }, 
        {
            "alias": "rural", 
            "default": "", 
            "dep_string": "demographics.ProjectedPopulationCount;demographics.UrbanPopulationThreshold", 
            "dependencies": [
                "demographics.ProjectedPopulationCount", 
                "demographics.UrbanPopulationThreshold"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (1 if (self.get(ProjectedPopulationCount) < self.get(UrbanPopulationThreshold)) else 0)\n", 
            "id": "demographics.IsRural", 
            "name": "demographics.IsRural", 
            "section": "demographics", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "binary", 
            "x": -0.24418083478750147, 
            "y": 0.01338747370689764
        }, 
        {
            "alias": "og_dem_d", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'o'):\n        self.value += childVS.get(demand.ProjectedNodalDiscountedDemand)\n", 
            "id": "OffGridSystemTotalDiscountedDemand", 
            "name": "OffGridSystemTotalDiscountedDemand", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "kilowatt-hours", 
            "x": 0.72967338277376215, 
            "y": -0.1612554760093666
        }, 
        {
            "alias": "di_ll_ini", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineCostPerMeter;costDistribution.LowVoltageLineLength", 
            "dependencies": [
                "costDistribution.LowVoltageLineCostPerMeter", 
                "costDistribution.LowVoltageLineLength"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(LowVoltageLineCostPerMeter) * self.get(LowVoltageLineLength))\n", 
            "id": "costDistribution.LowVoltageLineInitialCost", 
            "name": "costDistribution.LowVoltageLineInitialCost", 
            "section": "costDistribution", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.09520545287861816, 
            "y": 0.10067731624657771
        }, 
        {
            "alias": "pkdemf_u", 
            "default": 0.4, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.UrbanPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
            "name": "demand.UrbanPeakDemandAsFractionOfNodalDemandOccurringDuringPeakHours", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": -0.37224465941206747, 
            "y": 0.01915999312646326
        }, 
        {
            "alias": "gr_tr_ckw", 
            "default": 1000, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridTransformerCostPerGridSystemKilowatt", 
            "name": "costGrid.GridTransformerCostPerGridSystemKilowatt", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per kilowatt", 
            "x": 0.32060013279813177, 
            "y": -0.038411459980688407
        }, 
        {
            "alias": "og_dg_omf", 
            "default": 0.01, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.DieselGeneratorOperationsAndMaintenanceCostPerYearAsFractionOfGeneratorCost", 
            "name": "costOffGrid.DieselGeneratorOperationsAndMaintenanceCostPerYearAsFractionOfGeneratorCost", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": -0.028187520607499864, 
            "y": -0.3976413816864714
        }, 
        {
            "alias": "gr_i_cc", 
            "default": 130, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridInstallationCostPerConnection", 
            "name": "costGrid.GridInstallationCostPerConnection", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "dollars per connection", 
            "x": 0.16500833218569699, 
            "y": -0.12434143084440578
        }, 
        {
            "alias": "mg_tot_dgc", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'm'):\n        self.value += childVS.get(costMiniGrid.MiniGridSystemNodalDiscountedGenerationCost)\n", 
            "id": "MiniGridSystemTotalDiscountedGenerationCost", 
            "name": "MiniGridSystemTotalDiscountedGenerationCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.66034860560518838, 
            "y": 0.71578872075423827
        }, 
        {
            "alias": "og_pp_acps", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicPanelAvailableSystemCapacities;costOffGrid.PhotovoltaicPanelDesiredSystemCapacity", 
            "dependencies": [
                "costOffGrid.PhotovoltaicPanelAvailableSystemCapacities", 
                "costOffGrid.PhotovoltaicPanelDesiredSystemCapacity"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return metric.computeSystemCounts(self.get(PhotovoltaicPanelDesiredSystemCapacity), self.get(PhotovoltaicPanelAvailableSystemCapacities))\n", 
            "id": "costOffGrid.PhotovoltaicPanelActualSystemCapacityCounts", 
            "name": "costOffGrid.PhotovoltaicPanelActualSystemCapacityCounts", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "capacity count list", 
            "x": -0.066924129967580084, 
            "y": -0.16026624680693774
        }, 
        {
            "alias": "mg_g_cf", 
            "default": 1.0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.GenerationCapacityFactor", 
            "name": "costMiniGrid.GenerationCapacityFactor", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": 0.27292454377971759, 
            "y": -0.012670232176136725
        }, 
        {
            "alias": "co_cc", 
            "default": "", 
            "dep_string": "demand.CommercialFacilityCountCurvePoints;demand.CommercialFacilityCountCurveType", 
            "dependencies": [
                "demand.CommercialFacilityCountCurvePoints", 
                "demand.CommercialFacilityCountCurveType"
            ], 
            "fun_src": "\n\ndef compute(self):\n    curveType = self.get(CommercialFacilityCountCurveType)\n    curvePoints = self.get(CommercialFacilityCountCurvePoints)\n    return curve.fit(curveType, curvePoints)\n", 
            "id": "demand.CommercialFacilityCountCurve", 
            "name": "demand.CommercialFacilityCountCurve", 
            "section": "demand", 
            "type": "CURVE_FUN", 
            "units": "", 
            "x": -0.33416759710350591, 
            "y": -0.037644287141997884
        }, 
        {
            "alias": "p_dem_ho", 
            "default": "", 
            "dep_string": "demand.HouseholdDemandCurve;demand.HouseholdUnitDemandPerHouseholdPerYear;demand.TargetHouseholdCount;demographics.ProjectedPopulationCount;finance.ElectricityDemandMultiplier", 
            "dependencies": [
                "demand.HouseholdDemandCurve", 
                "demand.HouseholdUnitDemandPerHouseholdPerYear", 
                "demand.TargetHouseholdCount", 
                "demographics.ProjectedPopulationCount", 
                "finance.ElectricityDemandMultiplier"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(finance.ElectricityDemandMultiplier) * self.get(HouseholdDemandCurve).interpolate(self.get(demographics.ProjectedPopulationCount))) * self.get(HouseholdUnitDemandPerHouseholdPerYear)) * self.get(TargetHouseholdCount))\n", 
            "id": "demand.ProjectedHouseholdDemandPerYear", 
            "name": "demand.ProjectedHouseholdDemandPerYear", 
            "section": "demand", 
            "type": "CURVE_INTERPOLATE", 
            "units": "kilowatt-hours per year", 
            "x": -0.068385843397150869, 
            "y": -0.084249141112749948
        }, 
        {
            "alias": "di_ll_om", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineCostPerMeter;costDistribution.LowVoltageLineLength;costDistribution.LowVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost", 
            "dependencies": [
                "costDistribution.LowVoltageLineCostPerMeter", 
                "costDistribution.LowVoltageLineLength", 
                "costDistribution.LowVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return ((self.get(LowVoltageLineOperationsAndMaintenanceCostPerYearAsFractionOfLineCost) * self.get(LowVoltageLineCostPerMeter)) * self.get(LowVoltageLineLength))\n", 
            "id": "costDistribution.LowVoltageLineOperationsAndMaintenanceCostPerYear", 
            "name": "costDistribution.LowVoltageLineOperationsAndMaintenanceCostPerYear", 
            "section": "costDistribution", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.043013857821742989, 
            "y": 0.15135322130278989
        }, 
        {
            "alias": "gr_dem_d", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    childDataset = childVS.state[0]\n    childNode = childVS.state[1]\n    if ((childVS.get(System)[0] == 'g') and (not childDataset.wasNodeAlreadyConnected(childNode))):\n        self.value += childVS.get(demand.ProjectedNodalDiscountedDemand)\n", 
            "id": "GridSystemTotalDiscountedDemand", 
            "name": "GridSystemTotalDiscountedDemand", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "kilowatt-hours", 
            "x": -0.7844812986664913, 
            "y": 0.27890355952870544
        }, 
        {
            "alias": "gi_nod_d", 
            "default": "", 
            "dep_string": "costGrid.GridInternalSystemInitialCost;costGrid.GridInternalSystemRecurringCostPerYear;demand.ProjectedNodalDemandPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "costGrid.GridInternalSystemInitialCost", 
                "costGrid.GridInternalSystemRecurringCostPerYear", 
                "demand.ProjectedNodalDemandPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    if (self.get(demand.ProjectedNodalDemandPerYear) == 0):\n        return 0\n    return (self.get(GridInternalSystemInitialCost) + (self.get(GridInternalSystemRecurringCostPerYear) * self.get(finance.DiscountedCashFlowFactor)))\n", 
            "id": "costGrid.GridInternalSystemNodalDiscountedCost", 
            "name": "costGrid.GridInternalSystemNodalDiscountedCost", 
            "section": "costGrid", 
            "type": "OTHER", 
            "units": "dollars", 
            "x": 0.085182624272507113, 
            "y": 0.036187733642097951
        }, 
        {
            "alias": "p_pops", 
            "default": "", 
            "dep_string": "demographics.PopulationCount;demographics.RuralPopulationGrowthRatePerYear;demographics.UrbanPopulationGrowthRatePerYear;demographics.UrbanPopulationThreshold;finance.TimeHorizon", 
            "dependencies": [
                "demographics.PopulationCount", 
                "demographics.RuralPopulationGrowthRatePerYear", 
                "demographics.UrbanPopulationGrowthRatePerYear", 
                "demographics.UrbanPopulationThreshold", 
                "finance.TimeHorizon"
            ], 
            "fun_src": "\n\ndef compute(self):\n    populationCounts = [self.get(PopulationCount)]\n    urbanThreshold = self.get(UrbanPopulationThreshold)\n    ruralGrowthRate = self.get(RuralPopulationGrowthRatePerYear)\n    urbanGrowthRate = self.get(UrbanPopulationGrowthRatePerYear)\n    for year in xrange(self.get(finance.TimeHorizon)):\n        populationCount = populationCounts[(-1)]\n        populationGrowthRate = (ruralGrowthRate if (populationCount < urbanThreshold) else urbanGrowthRate)\n        populationCounts.append(int(math.ceil((populationCount * (1 + populationGrowthRate)))))\n    return populationCounts\n", 
            "id": "demographics.ProjectedPopulationCounts", 
            "name": "demographics.ProjectedPopulationCounts", 
            "section": "demographics", 
            "type": "OTHER", 
            "units": "person count list", 
            "x": -0.20922884044712456, 
            "y": 0.083507867949024234
        }, 
        {
            "alias": "co_dc_unit", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.CommercialFacilityUnitDemandPerCommercialFacilityPerYear", 
            "name": "demand.CommercialFacilityUnitDemandPerCommercialFacilityPerYear", 
            "section": "demand", 
            "type": "LEAF_VAR", 
            "units": "kilowatt-hours per year", 
            "x": -0.18755446306051018, 
            "y": -0.10823503660560437
        }, 
        {
            "alias": "og_px_rep", 
            "default": "", 
            "dep_string": "costOffGrid.PhotovoltaicBalanceCost;costOffGrid.PhotovoltaicBalanceLifetime", 
            "dependencies": [
                "costOffGrid.PhotovoltaicBalanceCost", 
                "costOffGrid.PhotovoltaicBalanceLifetime"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PhotovoltaicBalanceCost) / float(self.get(PhotovoltaicBalanceLifetime)))\n", 
            "id": "costOffGrid.PhotovoltaicBalanceReplacementCostPerYear", 
            "name": "costOffGrid.PhotovoltaicBalanceReplacementCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per year", 
            "x": -0.011101922682929912, 
            "y": -0.11999612636130624
        }, 
        {
            "alias": "so_dc_t", 
            "default": "ZeroLogisticLinear", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "demand.SocialInfrastructureDemandCurveType", 
            "name": "demand.SocialInfrastructureDemandCurveType", 
            "section": "demand", 
            "type": "CURVE_TYPE", 
            "units": "", 
            "x": -0.23852543667925183, 
            "y": -0.059084994412537707
        }, 
        {
            "alias": "p_dem_d", 
            "default": "", 
            "dep_string": "demand.ProjectedNodalDemandPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "demand.ProjectedNodalDemandPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(ProjectedNodalDemandPerYear) * self.get(finance.DiscountedCashFlowFactor))\n", 
            "id": "demand.ProjectedNodalDiscountedDemand", 
            "name": "demand.ProjectedNodalDiscountedDemand", 
            "section": "demand", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "kilowatt-hours", 
            "x": 0.039995812938702711, 
            "y": 0.061767094561909326
        }, 
        {
            "alias": "gr_so", 
            "default": "", 
            "dep_string": "demand.ProjectedCommercialFacilityCount;demand.ProjectedEducationFacilityCount;demand.ProjectedHealthFacilityCount;demand.ProjectedPublicLightingFacilityCount", 
            "dependencies": [
                "demand.ProjectedCommercialFacilityCount", 
                "demand.ProjectedEducationFacilityCount", 
                "demand.ProjectedHealthFacilityCount", 
                "demand.ProjectedPublicLightingFacilityCount"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (((self.get(demand.ProjectedHealthFacilityCount) + self.get(demand.ProjectedEducationFacilityCount)) + self.get(demand.ProjectedPublicLightingFacilityCount)) + self.get(demand.ProjectedCommercialFacilityCount))\n", 
            "id": "costGrid.GridSocialInfrastructureCount", 
            "name": "costGrid.GridSocialInfrastructureCount", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "facility count", 
            "x": -0.11142486246549366, 
            "y": -0.0063786723139983223
        }, 
        {
            "alias": "og_dg_acps", 
            "default": "", 
            "dep_string": "costOffGrid.DieselGeneratorAvailableSystemCapacities;costOffGrid.DieselGeneratorDesiredSystemCapacity", 
            "dependencies": [
                "costOffGrid.DieselGeneratorAvailableSystemCapacities", 
                "costOffGrid.DieselGeneratorDesiredSystemCapacity"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return metric.computeSystemCounts(self.get(DieselGeneratorDesiredSystemCapacity), self.get(DieselGeneratorAvailableSystemCapacities))\n", 
            "id": "costOffGrid.DieselGeneratorActualSystemCapacityCounts", 
            "name": "costOffGrid.DieselGeneratorActualSystemCapacityCounts", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "capacity count list", 
            "x": -0.19327273609242676, 
            "y": -0.25129694405576836
        }, 
        {
            "alias": "og_pp_cps", 
            "default": "1.5 1.0 0.4 0.15 0.075 0.05", 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicPanelAvailableSystemCapacities", 
            "name": "costOffGrid.PhotovoltaicPanelAvailableSystemCapacities", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "kilowatts list", 
            "x": -0.03570548659343116, 
            "y": -0.1977970120002801
        }, 
        {
            "alias": "he_cc", 
            "default": "", 
            "dep_string": "demand.HealthFacilityCountCurvePoints;demand.HealthFacilityCountCurveType", 
            "dependencies": [
                "demand.HealthFacilityCountCurvePoints", 
                "demand.HealthFacilityCountCurveType"
            ], 
            "fun_src": "\n\ndef compute(self):\n    curveType = self.get(HealthFacilityCountCurveType)\n    curvePoints = self.get(HealthFacilityCountCurvePoints)\n    return curve.fit(curveType, curvePoints)\n", 
            "id": "demand.HealthFacilityCountCurve", 
            "name": "demand.HealthFacilityCountCurve", 
            "section": "demand", 
            "type": "CURVE_FUN", 
            "units": "", 
            "x": -0.23081559351863706, 
            "y": -0.19974682519185874
        }, 
        {
            "alias": "mg_g_omf", 
            "default": 0.01, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.GenerationOperationsAndMaintenanceCostPerYearAsFractionOfGenerationCost", 
            "name": "costMiniGrid.GenerationOperationsAndMaintenanceCostPerYearAsFractionOfGenerationCost", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "fraction", 
            "x": 0.35192105315231514, 
            "y": 0.15097827699162389
        }, 
        {
            "alias": "og_rec", 
            "default": "", 
            "dep_string": "costOffGrid.DieselComponentRecurringCostPerYear;costOffGrid.PhotovoltaicComponentRecurringCostPerYear", 
            "dependencies": [
                "costOffGrid.DieselComponentRecurringCostPerYear", 
                "costOffGrid.PhotovoltaicComponentRecurringCostPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(PhotovoltaicComponentRecurringCostPerYear) + self.get(DieselComponentRecurringCostPerYear))\n", 
            "id": "costOffGrid.OffGridSystemRecurringCostPerYear", 
            "name": "costOffGrid.OffGridSystemRecurringCostPerYear", 
            "section": "costOffGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars per year", 
            "x": 0.02944564060571269, 
            "y": -0.12460287471466304
        }, 
        {
            "alias": "ed_cc", 
            "default": "", 
            "dep_string": "demand.EducationFacilityCountCurvePoints;demand.EducationFacilityCountCurveType", 
            "dependencies": [
                "demand.EducationFacilityCountCurvePoints", 
                "demand.EducationFacilityCountCurveType"
            ], 
            "fun_src": "\n\ndef compute(self):\n    curveType = self.get(EducationFacilityCountCurveType)\n    curvePoints = self.get(EducationFacilityCountCurvePoints)\n    return curve.fit(curveType, curvePoints)\n", 
            "id": "demand.EducationFacilityCountCurve", 
            "name": "demand.EducationFacilityCountCurve", 
            "section": "demand", 
            "type": "CURVE_FUN", 
            "units": "", 
            "x": -0.088627382397429677, 
            "y": 0.21043444821639448
        }, 
        {
            "alias": "og_pb_life", 
            "default": 3, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.PhotovoltaicBatteryLifetime", 
            "name": "costOffGrid.PhotovoltaicBatteryLifetime", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": 0.17668356468901528, 
            "y": -0.24354932017482706
        }, 
        {
            "alias": "gr_ml_life", 
            "default": 30, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costGrid.GridMediumVoltageLineLifetime", 
            "name": "costGrid.GridMediumVoltageLineLifetime", 
            "section": "costGrid", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": -0.094345982664598149, 
            "y": 0.50367156602767471
        }, 
        {
            "alias": "dem_g", 
            "default": "", 
            "dep_string": "finance.EconomicGrowthRatePerYear;finance.ElasticityOfElectricityDemand", 
            "dependencies": [
                "finance.EconomicGrowthRatePerYear", 
                "finance.ElasticityOfElectricityDemand"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (abs(self.get(ElasticityOfElectricityDemand)) * self.get(EconomicGrowthRatePerYear))\n", 
            "id": "finance.ElectricityDemandGrowthRatePerYear", 
            "name": "finance.ElectricityDemandGrowthRatePerYear", 
            "section": "finance", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "fraction per year", 
            "x": -0.24130435621972479, 
            "y": 0.028717990910313119
        }, 
        {
            "alias": "mg_nod_desc", 
            "default": "", 
            "dep_string": "costMiniGrid.EnergyStorageCostPerYear;finance.DiscountedCashFlowFactor", 
            "dependencies": [
                "costMiniGrid.EnergyStorageCostPerYear", 
                "finance.DiscountedCashFlowFactor"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(EnergyStorageCostPerYear) * self.get(finance.DiscountedCashFlowFactor))\n", 
            "id": "costMiniGrid.MiniGridSystemNodalDiscountedEnergyStorageCost", 
            "name": "costMiniGrid.MiniGridSystemNodalDiscountedEnergyStorageCost", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.1020732581429952, 
            "y": 0.12509327321597866
        }, 
        {
            "alias": "mg_g_life", 
            "default": 5, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costMiniGrid.GenerationLifetime", 
            "name": "costMiniGrid.GenerationLifetime", 
            "section": "costMiniGrid", 
            "type": "LEAF_VAR", 
            "units": "years", 
            "x": 0.35588410027671241, 
            "y": 0.11651853389418727
        }, 
        {
            "alias": "gr_tot_init", 
            "default": "", 
            "dep_string": "GridSystemTotalExternalInitialCost;GridSystemTotalInternalInitialCost", 
            "dependencies": [
                "GridSystemTotalExternalInitialCost", 
                "GridSystemTotalInternalInitialCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridSystemTotalInternalInitialCost) + self.get(GridSystemTotalExternalInitialCost))\n", 
            "id": "GridSystemTotalInitialCost", 
            "name": "GridSystemTotalInitialCost", 
            "section": "", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": -0.55065622272376813, 
            "y": -0.67151404660737102
        }, 
        {
            "alias": "og_dg_if", 
            "default": 0.25, 
            "dep_string": "", 
            "dependencies": [], 
            "id": "costOffGrid.DieselGeneratorInstallationCostAsFractionOfGeneratorCost", 
            "name": "costOffGrid.DieselGeneratorInstallationCostAsFractionOfGeneratorCost", 
            "section": "costOffGrid", 
            "type": "LEAF_VAR", 
            "units": "", 
            "x": -0.090437762421032977, 
            "y": -0.38665097205158566
        }, 
        {
            "alias": "mg_ini", 
            "default": "", 
            "dep_string": "costDistribution.LowVoltageLineInitialCost;costMiniGrid.GenerationCost;costMiniGrid.GenerationInstallationCost;costMiniGrid.LowVoltageLineEquipmentCost", 
            "dependencies": [
                "costDistribution.LowVoltageLineInitialCost", 
                "costMiniGrid.GenerationCost", 
                "costMiniGrid.GenerationInstallationCost", 
                "costMiniGrid.LowVoltageLineEquipmentCost"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return sum([self.get(GenerationCost), self.get(GenerationInstallationCost), self.get(LowVoltageLineEquipmentCost), self.get(costDistribution.LowVoltageLineInitialCost)])\n", 
            "id": "costMiniGrid.MiniGridSystemInitialCost", 
            "name": "costMiniGrid.MiniGridSystemInitialCost", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars", 
            "x": 0.17239555317701752, 
            "y": 0.10986430282228124
        }, 
        {
            "alias": "gr_ml_repm", 
            "default": "", 
            "dep_string": "costGrid.GridMediumVoltageLineCostPerMeter;costGrid.GridMediumVoltageLineLifetime", 
            "dependencies": [
                "costGrid.GridMediumVoltageLineCostPerMeter", 
                "costGrid.GridMediumVoltageLineLifetime"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GridMediumVoltageLineCostPerMeter) / float(self.get(GridMediumVoltageLineLifetime)))\n", 
            "id": "costGrid.GridMediumVoltageLineReplacementCostPerMeterPerYear", 
            "name": "costGrid.GridMediumVoltageLineReplacementCostPerMeterPerYear", 
            "section": "costGrid", 
            "type": "SINGLE_STMT_OTHER", 
            "units": "dollars per meter per year", 
            "x": -0.068341572719974944, 
            "y": 0.44147349984028572
        }, 
        {
            "alias": "p_pkdem_co", 
            "default": "", 
            "dep_string": "demand.DemandToPeakDemandConversionFactor;demand.ProjectedCommercialFacilityDemandPerYear", 
            "dependencies": [
                "demand.DemandToPeakDemandConversionFactor", 
                "demand.ProjectedCommercialFacilityDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(ProjectedCommercialFacilityDemandPerYear) * self.get(DemandToPeakDemandConversionFactor))\n", 
            "id": "demand.ProjectedPeakCommercialFacilityDemand", 
            "name": "demand.ProjectedPeakCommercialFacilityDemand", 
            "section": "demand", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "kilowatts", 
            "x": -0.19609828081619682, 
            "y": -0.095960044232504205
        }, 
        {
            "alias": "p_pkdem", 
            "default": "", 
            "dep_string": "demand.DemandToPeakDemandConversionFactor;demand.ProjectedNodalDemandPerYear", 
            "dependencies": [
                "demand.DemandToPeakDemandConversionFactor", 
                "demand.ProjectedNodalDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(ProjectedNodalDemandPerYear) * self.get(DemandToPeakDemandConversionFactor))\n", 
            "id": "demand.ProjectedPeakNodalDemand", 
            "name": "demand.ProjectedPeakNodalDemand", 
            "section": "demand", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "kilowatts", 
            "x": -0.051258413218955294, 
            "y": 0.023105982878698212
        }, 
        {
            "alias": "og_dg_efhr", 
            "default": "", 
            "dep_string": "costOffGrid.DieselGeneratorActualSystemCapacity;costOffGrid.DieselGeneratorMinimumHoursOfOperationPerYear;demand.ProjectedCommercialFacilityDemandPerYear;demand.ProjectedProductiveDemandPerYear", 
            "dependencies": [
                "costOffGrid.DieselGeneratorActualSystemCapacity", 
                "costOffGrid.DieselGeneratorMinimumHoursOfOperationPerYear", 
                "demand.ProjectedCommercialFacilityDemandPerYear", 
                "demand.ProjectedProductiveDemandPerYear"
            ], 
            "fun_src": "\n\ndef compute(self):\n    dieselGeneratorActualSystemCapacity = self.get(DieselGeneratorActualSystemCapacity)\n    if (dieselGeneratorActualSystemCapacity == 0):\n        return 0\n    effectiveDemandPerYear = (self.get(demand.ProjectedCommercialFacilityDemandPerYear) + self.get(demand.ProjectedProductiveDemandPerYear))\n    return max(self.get(DieselGeneratorMinimumHoursOfOperationPerYear), (effectiveDemandPerYear / float(dieselGeneratorActualSystemCapacity)))\n", 
            "id": "costOffGrid.DieselGeneratorEffectiveHoursOfOperationPerYear", 
            "name": "costOffGrid.DieselGeneratorEffectiveHoursOfOperationPerYear", 
            "section": "costOffGrid", 
            "type": "OTHER", 
            "units": "hours per year", 
            "x": -0.12146366224419733, 
            "y": -0.16823210333881766
        }, 
        {
            "alias": "og_tot_drc", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    if (childVS.get(System)[0] == 'o'):\n        self.value += (childVS.get(costOffGrid.OffGridSystemRecurringCostPerYear) * childVS.get(finance.DiscountedCashFlowFactor))\n", 
            "id": "OffGridSystemTotalDiscountedRecurringCost", 
            "name": "OffGridSystemTotalDiscountedRecurringCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": 0.93661666391777654, 
            "y": -0.39420043507265506
        }, 
        {
            "alias": "gr_tot_ext_drc", 
            "default": 0, 
            "dep_string": "", 
            "dependencies": [], 
            "fun_src": "\n\ndef aggregate(self, childVS):\n    childDataset = childVS.state[0]\n    childNode = childVS.state[1]\n    if ((childVS.get(System)[0] == 'g') and (not childDataset.wasNodeAlreadyConnected(childNode))):\n        newConnections = childDataset.cycleConnections(childNode, is_existing=False)\n        newConnectionLengthHalved = (sum((x.weight for x in newConnections)) / 2.0)\n        discountedExternalCostPerMeter = childVS.get(costGrid.GridExternalSystemNodalDiscountedRecurringCostPerMeter)\n        externalRecurringCost = (discountedExternalCostPerMeter * newConnectionLengthHalved)\n        self.value += externalRecurringCost\n", 
            "id": "GridSystemTotalExternalDiscountedRecurringCost", 
            "name": "GridSystemTotalExternalDiscountedRecurringCost", 
            "section": "", 
            "type": "AGGREGATE", 
            "units": "dollars", 
            "x": -0.16125396019310814, 
            "y": 0.32312804321891675
        }, 
        {
            "alias": "mg_g_ini", 
            "default": "", 
            "dep_string": "costMiniGrid.GenerationActualSystemCapacity;costMiniGrid.GenerationCostPerSystemKilowatt", 
            "dependencies": [
                "costMiniGrid.GenerationActualSystemCapacity", 
                "costMiniGrid.GenerationCostPerSystemKilowatt"
            ], 
            "fun_src": "\n\ndef compute(self):\n    return (self.get(GenerationCostPerSystemKilowatt) * self.get(GenerationActualSystemCapacity))\n", 
            "id": "costMiniGrid.GenerationCost", 
            "name": "costMiniGrid.GenerationCost", 
            "section": "costMiniGrid", 
            "type": "SINGLE_STMT_SIMPLE", 
            "units": "dollars", 
            "x": 0.26998950613574224, 
            "y": 0.15236167392544989
        }
    ]
}
